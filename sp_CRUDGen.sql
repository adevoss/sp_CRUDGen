IF OBJECT_ID('dbo.sp_CRUDGen') IS NULL
    BEGIN
        EXEC dbo.sp_executesql @stmt = N'CREATE PROCEDURE dbo.sp_CRUDGen AS BEGIN SET NOCOUNT ON; END';
    END;
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON;
GO
/**********************************************************************************************************************
** Author:      Kevin Martin
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Description: Used to generate the stored procedures listed below for your tables.
**               * [TABLE-NAME]Create (insert a single record)
**               * [TABLE-NAME]CreateMultiple? Could use JSON to serialize the object and deserialize the object into a temp table for multiple records
**               * [TABLE-NAME]Read (read a single record)
**               * [TABLE-NAME]ReadEager (read a single record and joined table columns)
**               * [TABLE-NAME]Update (update a single record)
**               * [TABLE-NAME]UpdateMultiple?
**               * [TABLE-NAME]Upsert (try to update the record first and fail back to insert)
**               * [TABLE-NAME]UpsertMultiple?
**               * [TABLE-NAME]Indate (try to insert the record first and fail back to update)
**               * [TABLE-NAME]IndateMultiple?
**               * [TABLE-NAME]Delete (delete a single record)
**               * [TABLE-NAME]DeleteMultiple?
**               * [TABLE-NAME]Search (dynamic T-SQL for optional parameters, kitchen sink, swiss army knife)
**********************************************************************************************************************/
ALTER PROCEDURE dbo.sp_CRUDGen (
    @GenerateStoredProcedures bit           = 0     /* 0 = Will only create the generated T-SQL to create the stored procedures, 1 = Will also create the stored procedures */
   ,@SchemaTableName          nvarchar(200) = NULL  /* NULL = Generate all tables, [SCHEMA.TABLENAME] or [TABLENAME] for just one table */
   ,@GenerateCreate           bit           = 1     /* 1 = Generate the Create stored procedure, 0 = Will not generate the Create stored procedure */
   ,@GenerateRead             bit           = 1     /* 1 = Generate the Read stored procedure, 0 = Will not generate the Read stored procedure */
   ,@GenerateReadEager        bit           = 1     /* 1 = Generate the ReadEager stored procedure, 0 = Will not generate the ReadEager stored procedure */
   ,@GenerateUpdate           bit           = 1     /* 1 = Generate the Update stored procedure, 0 = Will not generate the Update stored procedure */
   ,@GenerateUpsert           bit           = 1     /* 1 = Generate the Upsert stored procedure, 0 = Will not generate the Upsert stored procedure */
   ,@GenerateIndate           bit           = 1     /* 1 = Generate the Indate stored procedure, 0 = Will not generate the Indate stored procedure */
   ,@GenerateDelete           bit           = 1     /* 1 = Generate the Delete stored procedure, 0 = Will not generate the Delete stored procedure */
   ,@GenerateSearch           bit           = 1     /* 1 = Generate the Search stored procedure, 0 = Will not generate the Search stored procedure */
   ,@VersionCheckMode         bit           = 0     /* 1 = Will only return the version number and not execute, 0 = Will execute this stored procedure */
   ,@Version                  varchar(30)   = NULL OUTPUT
   ,@VersionDate              datetime      = NULL OUTPUT
)
WITH EXECUTE AS CALLER, RECOMPILE
AS
    BEGIN
        SET NOCOUNT, XACT_ABORT ON;
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

        /*
NOTES:

    * dbo.sp_CRUDGen will auto-generate and regenerate stored procedures for you. If you want to customize one of the generated stored procedures you can remove <auto-generated> comment section and the stored procedure will not be overwritten.
    * TODO: explain the parameters that dbo.sp_CRUDGen uses
    * list the stored procedures that will be created

--TODO: review window functions OVER(), there is a default being used that should be specified.
--TODO: figure out what can be turned into a parameter

    * Execute in database, not master.
    * 20 database tables takes about 1 minute to run. There is some looping in dbo.sp_CRUDGen that could be changed to set based operation if anyone would like.
    * Fork the repo to change the T-SQL style (or format with a tool like Regdate SQL Prompt) and naming conventions. Remember to create a pull request if you added something cool so the rest of the community can benefit.
    * Table names should be PascalCase.
    * Use FOREIGN KEY REFERENCES between tables for ReadEager and Search to recurse over related tables
    * Included table columns you can edit in dbo.sp_CRUDGen to customize for you column naming convention.
        * RowUpdatePersonId int - Is the person who last updated the record. FOREIGN KEY REFERENCES to a Person table.
        * RowUpdateTime datetimeoffset(7) - is the date and time with offset when the record was last updated.
        * RowCreateTime datetimeoffset(7) - is the date and time with offset when the record was created.
        * RowVersionStamp timestamp/rowversion - is used for optimistic concurrency in the delete and update stored procedures.
    * The Search stored procedure does not work with every column data type.
    * If you use Extended Properties Description names on tables and columns they will be included as comments in the stored procedures.
    * Do not used SQL Server reserved keywords.

SUPPORTS:
    Runs on SQL Server 2005, 2008, 2008 R2, 2012, 2014, 2016, 2017, 2019, ?Azure SQL Server


*/

        /**********************************************************************************************************************
        ** Declare varibles
        **********************************************************************************************************************/
        DECLARE @ScriptVersionName nvarchar(50);
        DECLARE @ExecuteOutputString nvarchar(MAX);
        DECLARE @ExecuteCreateString nvarchar(MAX);
        DECLARE @ExecuteReadString nvarchar(MAX);
        DECLARE @ExecuteReadEagerString nvarchar(MAX);
        DECLARE @ExecuteDropString nvarchar(MAX);
        DECLARE @ExecuteUpdateString nvarchar(MAX);
        DECLARE @ExecuteUpsertString nvarchar(MAX);
        DECLARE @ExecuteIndateString nvarchar(MAX);
        DECLARE @StringToExecuteDelete nvarchar(MAX);
        DECLARE @ExecuteSearchString nvarchar(MAX);
        DECLARE @ParameterString nvarchar(MAX);
        DECLARE @SP_ExecuteSQLParameterDefinitionString nvarchar(MAX);
        DECLARE @SP_ExecuteSQLParametersString nvarchar(MAX);
        DECLARE @SelectString nvarchar(MAX);
        DECLARE @InsertIntoString nvarchar(MAX);
        DECLARE @InsertIntoValuesString nvarchar(MAX);
        DECLARE @UpdateString nvarchar(MAX);
        DECLARE @OutputString nvarchar(MAX);
        DECLARE @FromString nvarchar(MAX);
        DECLARE @WhereString nvarchar(MAX);
        DECLARE @BetweenVariableString nvarchar(MAX);
        DECLARE @TempTableListString nvarchar(MAX);
        DECLARE @OrderColumnString nvarchar(MAX);
        DECLARE @IdentityColumnNameString nvarchar(MAX);
        DECLARE @IdentityColumnTableAliasString nvarchar(MAX);
        DECLARE @TemporaryTableStringColumnType nvarchar(MAX);
        DECLARE @TemporaryTableStringType nvarchar(MAX);
        DECLARE @UserNameString nvarchar(MAX);
        DECLARE @CreateTimeString nvarchar(MAX);
        DECLARE @NewLineString nvarchar(MAX);
        DECLARE @MITLicenseCommentString nvarchar(MAX);
        DECLARE @AutoGeneratedCommentString nvarchar(MAX);
        DECLARE @SeparatorStartingPosition int;
        DECLARE @StoreProcedureId int;
        DECLARE @SchemaName nvarchar(MAX);
        DECLARE @TableName nvarchar(MAX);
        DECLARE @TableDescription nvarchar(MAX);
        DECLARE @ProcedureName nvarchar(MAX);
        DECLARE @ProcedureType nvarchar(MAX);
        DECLARE @table_object_id int;

        /**********************************************************************************************************************
        ** Set varibles
        **********************************************************************************************************************/
        SET @Version = '0.11.8';
        SET @VersionDate = '20210427';
        SET @ScriptVersionName = N'sp_CRUDGen v' + @Version + N' - ' + DATENAME(MONTH, @VersionDate) + N' ' + RIGHT('0' + DATENAME(DAY, @VersionDate), 2) + N', ' + DATENAME(YEAR, @VersionDate);
        SET @ExecuteOutputString = N'';
        SET @UserNameString = CAST(SYSTEM_USER AS nvarchar(MAX));
        SET @CreateTimeString = CAST(CONVERT(nvarchar(30), GETUTCDATE(), 121) AS nvarchar(MAX)) + N' +00:00';
        SET @NewLineString = CAST(CHAR(13) + CHAR(10) AS nvarchar(MAX));
        --SET @MITLicenseCommentString = N'';
        SET @MITLicenseCommentString = N'/**********************************************************************************************************************
** MIT License
** 
** Copyright (c) ' + CAST(YEAR(GETUTCDATE()) AS nvarchar(MAX)) + N' Kevin Martin Tech, LLC. (http://kevinmartin.tech)
** 
** Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
** documentation files (the "Software"), to deal in the Software without restriction, including without limitation the 
** rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to 
** permit persons to whom the Software is furnished to do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in all copies or substantial portions of 
** the Software.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
** WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS 
** OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
** OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
**********************************************************************************************************************/';
        --SET @AutoGeneratedCommentString = N'/* <auto-generated></auto-generated> */';
        SET @AutoGeneratedCommentString = N'/* <auto-generated>
      This stored procedure was generated from the stored procedure named ' + CAST(ISNULL(OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID), 'dbo.sp_CRUDGen') AS nvarchar(MAX)) + N'
      NOTES: You can remove this comment section to keep this stored procedure from being overwritten.
             You can/should remove SELECT, UPDATE columns or FROM JOINs that are not needed.
</auto-generated> */';

        /* Exit if only the version is being checked */
        IF @VersionCheckMode = 1
            BEGIN
                RAISERROR(N'%s', 0, 1, @ScriptVersionName) WITH NOWAIT;
                RETURN 0;
            END;

        /**********************************************************************************************************************
        ** Create and load the stored procedure table
        **********************************************************************************************************************/
        IF OBJECT_ID('tempdb..#StoreProcedureList') IS NOT NULL
            BEGIN
                DROP TABLE #StoreProcedureList;
            END;
        CREATE TABLE #StoreProcedureList (
            StoreProcedureId    int           NOT NULL IDENTITY(1, 1) PRIMARY KEY
           ,table_object_id     int           NOT NULL
           ,table_schema_id     int           NOT NULL
           ,SchemaName          nvarchar(MAX) NOT NULL
           ,TableName           nvarchar(MAX) NOT NULL
           ,TableDescription    nvarchar(MAX) NOT NULL
           ,ProcedureName       nvarchar(MAX) NOT NULL
           ,ProcedureType       nvarchar(MAX) NOT NULL
           ,IsExistsFlag        bit           NOT NULL
           ,IsAutoGeneratedFlag bit           NOT NULL
           ,IsProcessedFlag     bit           NOT NULL
        );

        /* Parse the passed in parameter */
        IF @SchemaTableName IS NOT NULL
            BEGIN
                SET @SeparatorStartingPosition = CHARINDEX('.', @SchemaTableName);
                IF @SeparatorStartingPosition > 0
                    BEGIN
                        SELECT
                            @SchemaName = LEFT(@SchemaTableName, @SeparatorStartingPosition - 1)
                           ,@TableName  = RIGHT(@SchemaTableName, LEN(@SchemaTableName) - @SeparatorStartingPosition);
                    END;
                ELSE
                    BEGIN
                        SELECT  @SchemaName = NULL, @TableName = @SchemaTableName;
                    END;
            END;

        /* Insert into stored procedure list */
        INSERT INTO #StoreProcedureList (
            table_object_id
           ,table_schema_id
           ,SchemaName
           ,TableName
           ,TableDescription
           ,ProcedureName
           ,ProcedureType
           ,IsExistsFlag
           ,IsAutoGeneratedFlag
           ,IsProcessedFlag
        )
        SELECT
            table_object_id     = T.object_id
           ,table_schema_id     = S.schema_id
           ,SchemaName          = S.name
           ,TableName           = T.name
           ,TableDescription    = ISNULL(CAST(EP.value AS nvarchar(MAX)), N'')
           ,ProcedureName       = CAST(T.name + P.ProcedureType AS sysname)
           ,ProcedureType       = P.ProcedureType
           ,IsExistsFlag        = CASE WHEN EXISTS (
                                                SELECT
                                                    *
                                                FROM
                                                    sys.sql_modules        AS SM2
                                                    INNER JOIN sys.objects AS O2
                                                        ON SM2.object_id = O2.object_id
                                                    INNER JOIN sys.schemas AS S2
                                                        ON O2.schema_id  = S2.schema_id
                                                WHERE
                                                    S2.name = S.name
                                                AND O2.name = CAST(T.name + P.ProcedureType AS sysname)
                                            )
                                           THEN 1
                                      ELSE 0
                                  END
           ,IsAutoGeneratedFlag = CASE WHEN EXISTS (
                                                SELECT
                                                    *
                                                FROM
                                                    sys.sql_modules        AS SM2
                                                    INNER JOIN sys.objects AS O2
                                                        ON SM2.object_id = O2.object_id
                                                    INNER JOIN sys.schemas AS S2
                                                        ON O2.schema_id  = S2.schema_id
                                                WHERE
                                                    S2.name = S.name
                                                AND O2.name = CAST(T.name + P.ProcedureType AS sysname)
                                                AND SM2.definition LIKE '%<auto-generated>%'
                                            )
                                           THEN 1
                                      ELSE 0
                                  END
           ,IsProcessedFlag     = 0
        FROM
            sys.tables                              AS T
            INNER JOIN sys.schemas                  AS S
                ON S.schema_id = T.schema_id
            LEFT OUTER JOIN sys.extended_properties AS EP
                ON T.object_id = EP.major_id
                AND EP.minor_id = 0
                AND EP.class = 1
                AND EP.name = 'MS_Description'
            CROSS JOIN (
                SELECT
                    ProcedureType = 'Create'
                WHERE
                    @GenerateCreate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Read'
                WHERE
                    @GenerateRead = 1
                UNION ALL
                SELECT
                    ProcedureType = 'ReadEager'
                WHERE
                    @GenerateReadEager = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Update'
                WHERE
                    @GenerateUpdate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Upsert'
                WHERE
                    @GenerateUpsert = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Indate'
                WHERE
                    @GenerateIndate = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Delete'
                WHERE
                    @GenerateDelete = 1
                UNION ALL
                SELECT
                    ProcedureType = 'Search'
                WHERE
                    @GenerateSearch = 1
            )                                       AS P
        WHERE
            (
            T.name = @TableName
          OR @TableName IS NULL
        )
        AND (
            S.name = @SchemaName
          OR @SchemaName IS NULL
        )
        ORDER BY
            S.name
           ,T.name
        OPTION (RECOMPILE);


        /* Delete stored procedures that are not going to be dropped and created */
        DELETE  FROM
        #StoreProcedureList
        WHERE
            (
            IsExistsFlag = 1
         AND IsAutoGeneratedFlag = 0
        );

        /* Build the FROM clause variables */
        DECLARE
            @last_parent_object_id     int
           ,@last_referenced_object_id int
           ,@last_referenced_alias     nvarchar(MAX);

        /* Build the FROM clause varibles */
        DECLARE
            @TableListId                  int
           ,@Depth                        int
           ,@parent_object_id             int
           ,@referenced_object_id         int
           ,@referenced_schema            nvarchar(MAX)
           ,@referenced_table             nvarchar(MAX)
           ,@referenced_table_description nvarchar(MAX)
           ,@referenced_alias             nvarchar(MAX)
           ,@referenced_column            nvarchar(MAX)
           ,@parent_schema                nvarchar(MAX)
           ,@parent_table                 nvarchar(MAX)
           ,@parent_alias                 nvarchar(MAX)
           ,@parent_column                nvarchar(MAX)
           ,@parent_column_is_nullable    bit
           ,@HasTriggersFlag              bit
           ,@HasRowVersionStampFlag       bit;



        /**********************************************************************************************************************
        ** Loop over the list of stored procedures
        **********************************************************************************************************************/
        WHILE EXISTS (SELECT    * FROM #StoreProcedureList AS TL WHERE TL.IsProcessedFlag = 0)
            BEGIN
                /**********************************************************************************************************************
                ** Set the variables to the next unprocessed row
                **********************************************************************************************************************/
                SELECT  TOP (1)
                        @StoreProcedureId = SPL.StoreProcedureId
                       ,@SchemaName       = SPL.SchemaName
                       ,@TableName        = SPL.TableName
                       ,@TableDescription = SPL.TableDescription
                       ,@ProcedureName    = SPL.ProcedureName
                       ,@ProcedureType    = SPL.ProcedureType
                       ,@table_object_id  = SPL.table_object_id
                FROM
                        #StoreProcedureList AS SPL
                WHERE
                        SPL.IsProcessedFlag = 0
                ORDER BY
                        SPL.StoreProcedureId
                OPTION (RECOMPILE);


                /**********************************************************************************************************************
                ** Reset strings
                **********************************************************************************************************************/
                SET @ParameterString = N'';
                SET @SP_ExecuteSQLParameterDefinitionString = N'';
                SET @SP_ExecuteSQLParametersString = N'';
                SET @SelectString = N'';
                SET @InsertIntoString = N'';
                SET @InsertIntoValuesString = N'';
                SET @UpdateString = N'';
                SET @OutputString = N'';
                SET @FromString = N'';
                SET @WhereString = N'';
                SET @BetweenVariableString = N'';
                SET @TempTableListString = N'';
                SET @OrderColumnString = N'';
                SET @IdentityColumnNameString = N'';
                SET @IdentityColumnTableAliasString = N'';
                SET @TemporaryTableStringColumnType = N'';
                SET @TemporaryTableStringType = N'';
                SET @ExecuteDropString = N'';
                SET @ExecuteCreateString = N'';
                SET @ExecuteReadString = N'';
                SET @ExecuteReadEagerString = N'';
                SET @ExecuteUpdateString = N'';
                SET @ExecuteUpsertString = N'';
                SET @ExecuteIndateString = N'';
                SET @StringToExecuteDelete = N'';
                SET @ExecuteSearchString = N'';
                SET @HasRowVersionStampFlag = 0;


                /**********************************************************************************************************************
                ** Create and load the table list
                **********************************************************************************************************************/
                IF OBJECT_ID('tempdb..#TableList') IS NOT NULL
                    BEGIN
                        DROP TABLE #TableList;
                    END;
                CREATE TABLE #TableList (
                    TableListId                  int           NOT NULL IDENTITY(1, 1) PRIMARY KEY
                   ,Depth                        int           NOT NULL
                   ,parent_object_id             int           NULL
                   ,referenced_object_id         int           NOT NULL
                   ,referenced_schema            nvarchar(MAX) NOT NULL
                   ,referenced_table             nvarchar(MAX) NOT NULL
                   ,referenced_table_description nvarchar(MAX) NOT NULL
                   ,referenced_alias             nvarchar(MAX) NOT NULL
                   ,referenced_column            nvarchar(MAX) NULL
                   ,parent_schema                nvarchar(MAX) NULL
                   ,parent_table                 nvarchar(MAX) NULL
                   ,parent_alias                 nvarchar(MAX) NULL
                   ,parent_column                nvarchar(MAX) NULL
                   ,parent_column_is_nullable    bit           NULL
                   ,HasTriggersFlag              bit           NOT NULL
                   ,IsProcessedFlag              bit           NOT NULL
                );

                WITH Anchor
                  AS (
                      SELECT    DISTINCT
                                parent_object_id          = FKC.parent_object_id
                               ,parent_schema             = S1.name
                               ,parent_table              = T1.name
                               ,parent_column             = C1.name
                               ,parent_column_is_nullable = C1.is_nullable
                               ,referenced_object_id      = FKC.referenced_object_id
                               ,referenced_schema         = S2.name
                               ,referenced_table          = T2.name
                               ,referenced_column         = C2.name
                               ,Depth                     = 1
                               ,HierarchyPath             = CAST(FKC.referenced_object_id AS varchar(MAX)) + '->' + CAST(FKC.parent_object_id AS varchar(MAX))
                      FROM
                                sys.foreign_key_columns AS FKC
                                INNER JOIN sys.objects  AS O
                                    ON O.object_id   = FKC.constraint_object_id
                                INNER JOIN sys.tables   AS T1
                                    ON T1.object_id  = FKC.parent_object_id
                                INNER JOIN sys.schemas  AS S1
                                    ON T1.schema_id  = S1.schema_id
                                INNER JOIN sys.columns  AS C1
                                    ON C1.column_id  = FKC.parent_column_id
                                    AND C1.object_id = T1.object_id
                                INNER JOIN sys.tables   AS T2
                                    ON T2.object_id  = FKC.referenced_object_id
                                INNER JOIN sys.schemas  AS S2
                                    ON T2.schema_id  = S2.schema_id
                                INNER JOIN sys.columns  AS C2
                                    ON C2.column_id  = FKC.referenced_column_id
                                    AND C2.object_id = T2.object_id
                      WHERE
                                FKC.parent_object_id = @table_object_id
                      AND   C1.name                  <> 'RowUpdatePersonId'
                      UNION ALL
                      SELECT
                            parent_object_id          = FKC.parent_object_id
                           ,parent_schema             = S1.name
                           ,parent_table              = T1.name
                           ,parent_column             = C1.name
                           ,parent_column_is_nullable = C1.is_nullable
                           ,referenced_object_id      = FKC.referenced_object_id
                           ,referenced_schema         = S2.name
                           ,referenced_table          = T2.name
                           ,referenced_column         = C2.name
                           ,A.Depth + 1
                           ,A.HierarchyPath + '->' + CAST(FKC.parent_object_id AS varchar(MAX))
                      FROM
                            sys.foreign_key_columns AS FKC
                            INNER JOIN sys.objects  AS O
                                ON O.object_id          = FKC.constraint_object_id
                            INNER JOIN sys.tables   AS T1
                                ON T1.object_id         = FKC.parent_object_id
                            INNER JOIN sys.schemas  AS S1
                                ON T1.schema_id         = S1.schema_id
                            INNER JOIN sys.columns  AS C1
                                ON C1.column_id         = FKC.parent_column_id
                                AND C1.object_id        = T1.object_id
                            INNER JOIN sys.tables   AS T2
                                ON T2.object_id         = FKC.referenced_object_id
                            INNER JOIN sys.schemas  AS S2
                                ON T2.schema_id         = S2.schema_id
                            INNER JOIN sys.columns  AS C2
                                ON C2.column_id         = FKC.referenced_column_id
                                AND C2.object_id        = T2.object_id
                            INNER JOIN Anchor       AS A
                                ON FKC.parent_object_id = A.referenced_object_id
                      WHERE
                            FKC.parent_object_id <> FKC.referenced_object_id
                      AND   A.HierarchyPath NOT LIKE '%->' + CAST(FKC.parent_object_id AS varchar(MAX)) + '->%'
                      AND   C1.name              <> 'RowUpdatePersonId'
                  )
                    ,AddBaseTable
                  AS (
                      SELECT
                            parent_object_id          = NULL
                           ,referenced_object_id      = T.object_id
                           ,Depth                     = 0
                           ,referenced_schema         = S.name
                           ,referenced_table          = T.name
                           ,referenced_column         = NULL
                           ,parent_schema             = NULL
                           ,parent_table              = NULL
                           ,parent_column             = NULL
                           ,parent_column_is_nullable = NULL
                      FROM
                            sys.tables             AS T
                            INNER JOIN sys.schemas AS S
                                ON T.schema_id = S.schema_id
                      WHERE
                            T.object_id = @table_object_id
                      UNION ALL
                      SELECT
                            parent_object_id          = A.parent_object_id
                           ,referenced_object_id      = A.referenced_object_id
                           ,Depth                     = A.Depth
                           ,referenced_schema         = A.referenced_schema
                           ,referenced_table          = A.referenced_table
                           ,referenced_column         = A.referenced_column
                           ,parent_schema             = A.parent_schema
                           ,parent_table              = A.parent_table
                           ,parent_column             = A.parent_column
                           ,parent_column_is_nullable = A.parent_column_is_nullable
                      FROM
                            Anchor AS A
                  )
                    ,Numbering
                  AS (
                      SELECT
                            parent_object_id          = ATB.parent_object_id
                           ,referenced_object_id      = ATB.referenced_object_id
                           ,Depth                     = ATB.Depth
                           ,referenced_schema         = ATB.referenced_schema
                           ,referenced_table          = ATB.referenced_table
                           ,referenced_alias          = CAST(CASE WHEN LEN(R.referenced_table) > 0
                                                                      THEN R.referenced_table
                                                                 ELSE UPPER(LEFT(ATB.referenced_table, 1))
                                                             END + CASE WHEN CAST(ROW_NUMBER() OVER (PARTITION BY
                                                                                                         CASE WHEN LEN(R.referenced_table) > 0
                                                                                                                  THEN R.referenced_table
                                                                                                             ELSE UPPER(LEFT(ATB.referenced_table, 1))
                                                                                                         END
                                                                                                     ORDER BY
                                                                                                         ATB.Depth ASC
                                                                                               ) AS nvarchar(MAX)) = 1
                                                                            THEN CAST(N'' AS nvarchar(MAX))
                                                                       ELSE CAST(ROW_NUMBER() OVER (PARTITION BY
                                                                                                        CASE WHEN LEN(R.referenced_table) > 0
                                                                                                                 THEN R.referenced_table
                                                                                                            ELSE UPPER(LEFT(ATB.referenced_table, 1))
                                                                                                        END
                                                                                                    ORDER BY
                                                                                                        ATB.Depth ASC
                                                                                              ) - 1 AS nvarchar(MAX))
                                                                   END AS nvarchar(MAX))
                           ,referenced_column         = ATB.referenced_column
                           ,parent_schema             = ATB.parent_schema
                           ,parent_table              = ATB.parent_table
                           ,parent_column             = ATB.parent_column
                           ,parent_column_is_nullable = ATB.parent_column_is_nullable
                      FROM
                        -- SQL Prompt formatting off
                        AddBaseTable AS ATB 
                        CROSS APPLY (SELECT REPLACE(ATB.referenced_table COLLATE Latin1_General_BIN, 'a', N'')  AS referenced_table) AS R1 /* TRANSLATE() would work with one line but is only supported in 2017+ */
                        CROSS APPLY (SELECT REPLACE(R1.referenced_table  COLLATE Latin1_General_BIN, 'b', N'')  AS referenced_table) AS R2
                        CROSS APPLY (SELECT REPLACE(R2.referenced_table  COLLATE Latin1_General_BIN, 'c', N'')  AS referenced_table) AS R3
                        CROSS APPLY (SELECT REPLACE(R3.referenced_table  COLLATE Latin1_General_BIN, 'd', N'')  AS referenced_table) AS R4
                        CROSS APPLY (SELECT REPLACE(R4.referenced_table  COLLATE Latin1_General_BIN, 'e', N'')  AS referenced_table) AS R5
                        CROSS APPLY (SELECT REPLACE(R5.referenced_table  COLLATE Latin1_General_BIN, 'f', N'')  AS referenced_table) AS R6
                        CROSS APPLY (SELECT REPLACE(R6.referenced_table  COLLATE Latin1_General_BIN, 'g', N'')  AS referenced_table) AS R7
                        CROSS APPLY (SELECT REPLACE(R7.referenced_table  COLLATE Latin1_General_BIN, 'h', N'')  AS referenced_table) AS R8
                        CROSS APPLY (SELECT REPLACE(R8.referenced_table  COLLATE Latin1_General_BIN, 'i', N'')  AS referenced_table) AS R9
                        CROSS APPLY (SELECT REPLACE(R9.referenced_table  COLLATE Latin1_General_BIN, 'j', N'')  AS referenced_table) AS R10
                        CROSS APPLY (SELECT REPLACE(R10.referenced_table COLLATE Latin1_General_BIN, 'k', N'')  AS referenced_table) AS R11
                        CROSS APPLY (SELECT REPLACE(R11.referenced_table COLLATE Latin1_General_BIN, 'l', N'')  AS referenced_table) AS R12
                        CROSS APPLY (SELECT REPLACE(R12.referenced_table COLLATE Latin1_General_BIN, 'm', N'')  AS referenced_table) AS R13
                        CROSS APPLY (SELECT REPLACE(R13.referenced_table COLLATE Latin1_General_BIN, 'n', N'')  AS referenced_table) AS R14
                        CROSS APPLY (SELECT REPLACE(R14.referenced_table COLLATE Latin1_General_BIN, 'o', N'')  AS referenced_table) AS R15
                        CROSS APPLY (SELECT REPLACE(R15.referenced_table COLLATE Latin1_General_BIN, 'p', N'')  AS referenced_table) AS R16
                        CROSS APPLY (SELECT REPLACE(R16.referenced_table COLLATE Latin1_General_BIN, 'q', N'')  AS referenced_table) AS R17
                        CROSS APPLY (SELECT REPLACE(R17.referenced_table COLLATE Latin1_General_BIN, 'r', N'')  AS referenced_table) AS R18
                        CROSS APPLY (SELECT REPLACE(R18.referenced_table COLLATE Latin1_General_BIN, 's', N'')  AS referenced_table) AS R19
                        CROSS APPLY (SELECT REPLACE(R19.referenced_table COLLATE Latin1_General_BIN, 't', N'')  AS referenced_table) AS R20
                        CROSS APPLY (SELECT REPLACE(R20.referenced_table COLLATE Latin1_General_BIN, 'u', N'')  AS referenced_table) AS R21
                        CROSS APPLY (SELECT REPLACE(R21.referenced_table COLLATE Latin1_General_BIN, 'v', N'')  AS referenced_table) AS R22
                        CROSS APPLY (SELECT REPLACE(R22.referenced_table COLLATE Latin1_General_BIN, 'w', N'')  AS referenced_table) AS R23
                        CROSS APPLY (SELECT REPLACE(R23.referenced_table COLLATE Latin1_General_BIN, 'x', N'')  AS referenced_table) AS R24
                        CROSS APPLY (SELECT REPLACE(R24.referenced_table COLLATE Latin1_General_BIN, 'y', N'')  AS referenced_table) AS R25
                        CROSS APPLY (SELECT REPLACE(R25.referenced_table COLLATE Latin1_General_BIN, 'z', N'')  AS referenced_table) AS R26
                        CROSS APPLY (SELECT REPLACE(R26.referenced_table COLLATE Latin1_General_BIN, '~', N'')  AS referenced_table) AS R27
                        CROSS APPLY (SELECT REPLACE(R27.referenced_table COLLATE Latin1_General_BIN, '`', N'')  AS referenced_table) AS R28
                        CROSS APPLY (SELECT REPLACE(R28.referenced_table COLLATE Latin1_General_BIN, '!', N'')  AS referenced_table) AS R29
                        CROSS APPLY (SELECT REPLACE(R29.referenced_table COLLATE Latin1_General_BIN, '@', N'')  AS referenced_table) AS R30
                        CROSS APPLY (SELECT REPLACE(R30.referenced_table COLLATE Latin1_General_BIN, '#', N'')  AS referenced_table) AS R31
                        CROSS APPLY (SELECT REPLACE(R31.referenced_table COLLATE Latin1_General_BIN, '$', N'')  AS referenced_table) AS R32
                        CROSS APPLY (SELECT REPLACE(R32.referenced_table COLLATE Latin1_General_BIN, '%', N'')  AS referenced_table) AS R33
                        CROSS APPLY (SELECT REPLACE(R33.referenced_table COLLATE Latin1_General_BIN, '^', N'')  AS referenced_table) AS R34
                        CROSS APPLY (SELECT REPLACE(R34.referenced_table COLLATE Latin1_General_BIN, '&', N'')  AS referenced_table) AS R35
                        CROSS APPLY (SELECT REPLACE(R35.referenced_table COLLATE Latin1_General_BIN, '*', N'')  AS referenced_table) AS R36
                        CROSS APPLY (SELECT REPLACE(R36.referenced_table COLLATE Latin1_General_BIN, '(', N'')  AS referenced_table) AS R37
                        CROSS APPLY (SELECT REPLACE(R37.referenced_table COLLATE Latin1_General_BIN, ')', N'')  AS referenced_table) AS R38
                        CROSS APPLY (SELECT REPLACE(R38.referenced_table COLLATE Latin1_General_BIN, '-', N'')  AS referenced_table) AS R39
                        CROSS APPLY (SELECT REPLACE(R39.referenced_table COLLATE Latin1_General_BIN, '_', N'')  AS referenced_table) AS R40
                        CROSS APPLY (SELECT REPLACE(R40.referenced_table COLLATE Latin1_General_BIN, '=', N'')  AS referenced_table) AS R41
                        CROSS APPLY (SELECT REPLACE(R41.referenced_table COLLATE Latin1_General_BIN, '+', N'')  AS referenced_table) AS R42
                        CROSS APPLY (SELECT REPLACE(R42.referenced_table COLLATE Latin1_General_BIN, '[', N'')  AS referenced_table) AS R43
                        CROSS APPLY (SELECT REPLACE(R43.referenced_table COLLATE Latin1_General_BIN, '{', N'')  AS referenced_table) AS R44
                        CROSS APPLY (SELECT REPLACE(R44.referenced_table COLLATE Latin1_General_BIN, ']', N'')  AS referenced_table) AS R45
                        CROSS APPLY (SELECT REPLACE(R45.referenced_table COLLATE Latin1_General_BIN, '}', N'')  AS referenced_table) AS R46
                        CROSS APPLY (SELECT REPLACE(R46.referenced_table COLLATE Latin1_General_BIN, '\', N'')  AS referenced_table) AS R47
                        CROSS APPLY (SELECT REPLACE(R47.referenced_table COLLATE Latin1_General_BIN, '|', N'')  AS referenced_table) AS R48
                        CROSS APPLY (SELECT REPLACE(R48.referenced_table COLLATE Latin1_General_BIN, ':', N'')  AS referenced_table) AS R49
                        CROSS APPLY (SELECT REPLACE(R49.referenced_table COLLATE Latin1_General_BIN, ';', N'')  AS referenced_table) AS R50
                        CROSS APPLY (SELECT REPLACE(R50.referenced_table COLLATE Latin1_General_BIN, '"', N'')  AS referenced_table) AS R51
                        CROSS APPLY (SELECT REPLACE(R51.referenced_table COLLATE Latin1_General_BIN, '/', N'')  AS referenced_table) AS R52
                        CROSS APPLY (SELECT REPLACE(R52.referenced_table COLLATE Latin1_General_BIN, '?', N'')  AS referenced_table) AS R53
                        CROSS APPLY (SELECT REPLACE(R53.referenced_table COLLATE Latin1_General_BIN, '.', N'')  AS referenced_table) AS R54
                        CROSS APPLY (SELECT REPLACE(R54.referenced_table COLLATE Latin1_General_BIN, ',', N'')  AS referenced_table) AS R55
                        CROSS APPLY (SELECT REPLACE(R55.referenced_table COLLATE Latin1_General_BIN, '>', N'')  AS referenced_table) AS R56
                        CROSS APPLY (SELECT REPLACE(R56.referenced_table COLLATE Latin1_General_BIN, '<', N'')  AS referenced_table) AS R57
                        CROSS APPLY (SELECT REPLACE(R57.referenced_table COLLATE Latin1_General_BIN, ' ', N'')  AS referenced_table) AS R58
                        CROSS APPLY (SELECT REPLACE(R58.referenced_table COLLATE Latin1_General_BIN, '''', N'') AS referenced_table) AS R 
                        -- SQL Prompt formatting on
                  )
                INSERT INTO #TableList (
                    Depth
                   ,parent_object_id
                   ,referenced_object_id
                   ,referenced_schema
                   ,referenced_table
                   ,referenced_table_description
                   ,referenced_alias
                   ,referenced_column
                   ,parent_schema
                   ,parent_table
                   ,parent_alias
                   ,parent_column
                   ,parent_column_is_nullable
                   ,HasTriggersFlag
                   ,IsProcessedFlag
                )
                SELECT
                    Depth                        = N.Depth
                   ,parent_object_id             = N.parent_object_id
                   ,referenced_object_id         = N.referenced_object_id
                   ,referenced_schema            = N.referenced_schema
                   ,referenced_table             = N.referenced_table
                   ,referenced_table_description = ISNULL(REPLACE(CAST(EP.value AS nvarchar(MAX)), N'''', N''''''), N'')
                   ,referenced_alias             = N.referenced_alias
                   ,referenced_column            = N.referenced_column
                   ,parent_schema                = N.parent_schema
                   ,parent_table                 = N.parent_table
                   ,parent_alias                 = (
                        SELECT  TOP (1)
                                T1.referenced_alias
                        FROM
                                Numbering AS T1
                        WHERE
                                N.parent_object_id = T1.referenced_object_id
                        AND N.Depth                >= T1.Depth
                        ORDER BY
                                T1.referenced_alias ASC
                    )
                   ,parent_column                = N.parent_column
                   ,parent_column_is_nullable    = N.parent_column_is_nullable
                   ,HasTriggersFlag              = CASE WHEN EXISTS (
                                                                 SELECT     * FROM  sys.triggers AS TG WHERE TG.parent_id = N.referenced_object_id
                                                             )
                                                            THEN 1
                                                       ELSE 0
                                                   END
                   ,IsProcessedFlag              = 0
                FROM
                    Numbering                               AS N
                    LEFT OUTER JOIN sys.extended_properties AS EP
                        ON N.referenced_object_id = EP.major_id
                        AND EP.minor_id           = 0
                        AND EP.class              = 1
                        AND EP.name               = 'MS_Description'
                --WHERE /* Exclude multiple column foreign key */
                --    N.parent_object_id IS NULL
                --OR  EXISTS (
                --    SELECT
                --        E.constraint_object_id
                --       ,E.parent_object_id
                --    FROM
                --        sys.foreign_key_columns AS E
                --    WHERE
                --        N.referenced_object_id = E.referenced_object_id
                --    GROUP BY
                --        E.constraint_object_id
                --       ,E.parent_object_id
                --    HAVING
                --        COUNT(*) = 1
                --)
                ORDER BY
                    N.Depth ASC
                OPTION (RECOMPILE);


                /**********************************************************************************************************************
                ** Create and load column list
                **********************************************************************************************************************/
                IF OBJECT_ID('tempdb..#ColumnList') IS NOT NULL
                    BEGIN
                        DROP TABLE #ColumnList;
                    END;
                CREATE TABLE #ColumnList (
                    ColumnListId       int           NOT NULL IDENTITY(1, 1) PRIMARY KEY
                   ,schema_id          int           NOT NULL
                   ,Depth              int           NOT NULL
                   ,Table_object_id    int           NOT NULL
                   ,SchemaName         nvarchar(MAX) NOT NULL
                   ,TableName          nvarchar(MAX) NOT NULL
                   ,TableAlias         nvarchar(MAX) NOT NULL
                   ,column_object_id   int           NOT NULL
                   ,column_id          int           NOT NULL
                   ,ColumnName         nvarchar(MAX) NOT NULL
                   ,ColumnNameCleaned  nvarchar(MAX) NOT NULL
                   ,ColumnDescription  nvarchar(MAX) NOT NULL
                   ,IsPrimaryKeyFlag   bit           NOT NULL
                   ,IsIdentityFlag     bit           NOT NULL
                   ,IsComputedFlag     bit           NOT NULL
                   ,IsReferencedColumn bit           NOT NULL
                   ,user_type_id       int           NOT NULL
                   ,TypeName           nvarchar(MAX) NOT NULL
                   ,TypeLength         nvarchar(MAX) NOT NULL
                   ,Is_Nullable        nvarchar(MAX) NOT NULL
                   ,IsProcessedFlag    bit           NOT NULL
                );
                INSERT INTO #ColumnList (
                    schema_id
                   ,Depth
                   ,Table_object_id
                   ,SchemaName
                   ,TableName
                   ,TableAlias
                   ,column_object_id
                   ,column_id
                   ,ColumnName
                   ,ColumnNameCleaned
                   ,ColumnDescription
                   ,IsPrimaryKeyFlag
                   ,IsIdentityFlag
                   ,IsComputedFlag
                   ,IsReferencedColumn
                   ,user_type_id
                   ,TypeName
                   ,TypeLength
                   ,Is_Nullable
                   ,IsProcessedFlag
                )
                SELECT
                    schema_id          = S.schema_id
                   ,Depth              = TL.Depth
                   ,Table_object_id    = C.object_id
                   ,SchemaName         = S.name
                   ,TableName          = T.name
                   ,TableAlias         = TL.referenced_alias
                   ,column_object_id   = C.object_id
                   ,column_id          = C.column_id
                   ,ColumnName         = C.name
                   ,ColumnNameCleaned  = REPLACE(C.name, N' ', N'')
                   ,ColumnDescription  = ISNULL(REPLACE(CAST(EP.value AS nvarchar(MAX)), N'''', N''''''), N'')
                   ,IsPrimaryKeyFlag   = CASE WHEN PK.object_id IS NOT NULL THEN 1 ELSE 0 END
                   ,IsIdentityFlag     = C.is_identity
                   ,IsComputedFlag     = C.is_computed
                   ,IsReferencedColumn = CASE WHEN EXISTS (
                                                       SELECT
                                                            *
                                                       FROM
                                                            #TableList AS TLSub
                                                       WHERE
                                                            TLSub.referenced_schema = S.name
                                                       AND  TLSub.referenced_table  = T.name
                                                       AND  TLSub.parent_column     = C.name
                                                   )
                                                  THEN 1
                                             ELSE 0
                                         END
                   ,user_type_id       = C.user_type_id
                   ,TypeName           = CASE WHEN TP.name = 'timestamp' THEN 'rowversion' ELSE TP.name END
                   ,TypeLength         =
                   /* decimal, numeric */
                   CASE WHEN C.user_type_id IN (106, 108)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CAST(C.precision AS varchar(3)) + CAST(N', ' AS nvarchar(MAX)) + CAST(C.scale AS varchar(3)) + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* datetime2, datetimeoffset, time */
                   CASE WHEN C.user_type_id IN (41, 42, 43)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CAST(C.scale AS varchar(3)) + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* varbinary, binary, varchar, char */
                   CASE WHEN C.user_type_id IN (165, 167, 173, 175)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CASE WHEN C.max_length = -1
                                                                        THEN CAST(N'MAX' AS nvarchar(MAX))
                                                                   ELSE CAST(C.max_length AS varchar(4))
                                                               END + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END +
                   /* nvarchar, nchar */
                   CASE WHEN C.user_type_id IN (231, 239)
                            THEN CAST(N'(' AS nvarchar(MAX)) + CASE WHEN C.max_length = -1
                                                                        THEN CAST(N'MAX' AS nvarchar(MAX))
                                                                   ELSE CAST(C.max_length / 2 AS varchar(4))
                                                               END + CAST(N')' AS nvarchar(MAX))
                       ELSE CAST(N'' AS nvarchar(MAX))
                   END
                   ,Is_Nullable        = CAST(CASE WHEN C.is_nullable = 1
                                                       THEN CAST(N'NULL' AS nvarchar(MAX))
                                                  ELSE CAST(N'NOT NULL' AS nvarchar(MAX))
                                              END AS nvarchar(MAX))
                   ,IsProcessedFlag    = 0
                FROM
                    sys.columns                             AS C
                    INNER JOIN sys.tables                   AS T
                        ON C.object_id     = T.object_id
                    INNER JOIN sys.schemas                  AS S
                        ON T.schema_id     = S.schema_id
                    INNER JOIN sys.objects                  AS SO
                        ON SO.object_id    = C.object_id
                    INNER JOIN sys.types                    AS TP
                        ON TP.user_type_id = C.user_type_id
                    INNER JOIN #TableList                   AS TL
                        ON C.object_id     = TL.referenced_object_id
                    LEFT OUTER JOIN sys.extended_properties AS EP
                        ON C.object_id     = EP.major_id
                        AND C.column_id    = EP.minor_id
                        AND EP.class       = 1
                        AND EP.name        = 'MS_Description'
                    LEFT OUTER JOIN (
                        SELECT
                            C.object_id
                           ,C.column_id
                        FROM
                            sys.indexes                  AS I
                            INNER JOIN sys.index_columns AS IC
                                ON I.object_id  = IC.object_id
                                AND I.index_id  = IC.index_id
                            INNER JOIN sys.columns       AS C
                                ON IC.object_id = C.object_id
                                AND C.column_id = IC.column_id
                        WHERE
                            I.is_primary_key = 1
                    )                                       AS PK
                        ON C.object_id     = PK.object_id
                        AND C.column_id    = PK.column_id
                WHERE
                    SO.type = 'U'
                ORDER BY
                    TL.TableListId ASC
                   ,C.column_id ASC
                OPTION (RECOMPILE);

                /* Find duplicate column names and add the table alias */
                UPDATE
                    #ColumnList
                SET
                    ColumnNameCleaned = ColumnNameCleaned + TableAlias
                WHERE
                    EXISTS (
                    SELECT
                        CL.ColumnName
                    FROM
                        #ColumnList AS CL
                    WHERE
                        CL.ColumnName     = #ColumnList.ColumnName
                    AND #ColumnList.Depth > 0
                    GROUP BY
                        CL.ColumnName
                    HAVING
                        COUNT(*) > 1
                );

                /* Determine if the there is a datetimeoffset so we can create the @AtTimeZoneName parameter */
                DECLARE @HasDateTimeOffsetFlag bit;

                IF EXISTS (
                    SELECT  * FROM  #ColumnList AS CL WHERE CL.TypeName = 'datetimeoffset'
                )
                    BEGIN
                        SET @HasDateTimeOffsetFlag = 1;
                    END;
                ELSE
                    BEGIN
                        SET @HasDateTimeOffsetFlag = 0;
                    END;

                /**********************************************************************************************************************
                ** Build column list for the output temporary table
                **********************************************************************************************************************/
                IF @ProcedureType IN (N'Create', N'Update', N'Upsert', N'Indate')
                    BEGIN
                        SELECT
                            @TemporaryTableStringColumnType = @TemporaryTableStringColumnType + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + N' NULL'
                           ,@TemporaryTableStringType       = @TemporaryTableStringType + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName)
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsComputedFlag = 0
                        --AND CL.IsIdentityFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        --AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TemporaryTableStringColumnType) > 0
                            BEGIN
                                SET @TemporaryTableStringColumnType = RIGHT(@TemporaryTableStringColumnType, LEN(@TemporaryTableStringColumnType) - 20);
                            END;

                        IF LEN(@TemporaryTableStringType) > 0
                            BEGIN
                                SET @TemporaryTableStringType = RIGHT(@TemporaryTableStringType, LEN(@TemporaryTableStringType) - 20);
                            END;

                    END;

                IF @ProcedureType IN (N'Create', N'Update', N'Upsert', N'Indate')
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the OUTPUT clause
                        **********************************************************************************************************************/
                        SELECT
                            @OutputString = @OutputString + @NewLineString + N'/*INDENT SPACES*/,Inserted.' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                  THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                             ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                         END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        ORDER BY
                            CL.ColumnListId ASC;


                        /* Fix the first item */
                        IF LEN(@OutputString) > 0
                            BEGIN
                                SET @OutputString = RIGHT(@OutputString, LEN(@OutputString) - 20);
                            END;

                    END;

                /**********************************************************************************************************************
                ** Build the FROM clause
                **********************************************************************************************************************/
                WHILE EXISTS (SELECT    * FROM #TableList AS TL WHERE  TL.IsProcessedFlag = 0)
                    BEGIN
                        /**********************************************************************************************************************
                        ** Set the variables to the next unprocessed record
                        **********************************************************************************************************************/
                        SELECT  TOP (1)
                                @TableListId                  = TL.TableListId
                               ,@Depth                        = TL.Depth
                               ,@parent_object_id             = TL.parent_object_id
                               ,@referenced_object_id         = TL.referenced_object_id
                               ,@referenced_schema            = TL.referenced_schema
                               ,@referenced_table             = TL.referenced_table
                               ,@referenced_table_description = TL.referenced_table_description
                               ,@referenced_alias             = TL.referenced_alias
                               ,@referenced_column            = TL.referenced_column
                               ,@parent_schema                = TL.parent_schema
                               ,@parent_table                 = TL.parent_table
                               ,@parent_alias                 = TL.parent_alias
                               ,@parent_column                = TL.parent_column
                               ,@parent_column_is_nullable    = TL.parent_column_is_nullable
                               ,@HasTriggersFlag              = TL.HasTriggersFlag
                        FROM
                                #TableList AS TL
                        WHERE
                                TL.IsProcessedFlag = 0
                        ORDER BY
                                TL.Depth ASC
                        OPTION (RECOMPILE);


                        /**********************************************************************************************************************
                        ** Check if child table also needs to be a LEFT OUTER JOIN
                        **********************************************************************************************************************/
                        IF EXISTS (
                            SELECT
                                *
                            FROM
                                #TableList AS TL
                            WHERE
                                TL.referenced_object_id      = @parent_object_id
                            AND TL.parent_column_is_nullable = 1
                        )
                            BEGIN
                                UPDATE
                                    #TableList
                                SET
                                    parent_column_is_nullable = 1
                                WHERE
                                    TableListId = @TableListId;

                                SET @parent_column_is_nullable = 1;
                            END;


                        /**********************************************************************************************************************
                        ** Check for INNER JOIN or LEFT OUTER JOIN
                        **********************************************************************************************************************/
                        IF @Depth > 0
                            BEGIN
                                IF @parent_column_is_nullable = 1
                                    BEGIN
                                        SET @FromString = @FromString + @NewLineString + N'/*INDENT SPACES*/LEFT OUTER JOIN ';
                                    END;
                                ELSE
                                    BEGIN
                                        SET @FromString = @FromString + @NewLineString + N'/*INDENT SPACES*/INNER JOIN ';
                                    END;
                            END;


                        /**********************************************************************************************************************
                        ** Check for JOIN condition
                        **********************************************************************************************************************/
                        IF @Depth = 0
                            BEGIN
                                SET @FromString = @FromString + QUOTENAME(@referenced_schema) + N'.' + QUOTENAME(@referenced_table) + N' AS ' + @referenced_alias + N'/*[JOIN CONDITION]*/' + CASE WHEN LEN(@referenced_table_description) > 0
                                                                                                                                                                                                       THEN N' /* ' + @referenced_table_description + N' */'
                                                                                                                                                                                                  ELSE N''
                                                                                                                                                                                              END;
                            END;
                        ELSE IF @Depth > 0
                                 BEGIN
                                     SET @FromString = @FromString + QUOTENAME(@referenced_schema) + N'.' + QUOTENAME(@referenced_table) + N' AS ' + @referenced_alias + CASE WHEN LEN(@referenced_table_description) > 0
                                                                                                                                                                                  THEN N' /* ' + @referenced_table_description + N' */'
                                                                                                                                                                             ELSE N''
                                                                                                                                                                         END;
                                     SET @FromString = @FromString + @NewLineString + N'/*[ON SPACE]*/ON ' + @parent_alias + N'.' + QUOTENAME(@parent_column) + N' = ' + @referenced_alias + N'.' + QUOTENAME(@referenced_column);
                                 END;


                        /**********************************************************************************************************************
                        ** Save these varibles for the next loop to check
                        **********************************************************************************************************************/
                        SET @last_parent_object_id = @parent_object_id;
                        SET @last_referenced_object_id = @referenced_object_id;
                        SET @last_referenced_alias = @referenced_alias;


                        /**********************************************************************************************************************
                        ** Mark this table record as processed
                        **********************************************************************************************************************/
                        UPDATE  #TableList SET  IsProcessedFlag = 1 WHERE   TableListId = @TableListId
                        OPTION (RECOMPILE);

                    END;

                /**********************************************************************************************************************
                ** Drop stored procedure
                **********************************************************************************************************************/
                SET @ExecuteDropString = N'IF OBJECT_ID(''' + @SchemaName + CAST(N'.' AS nvarchar(MAX)) + @ProcedureName + N''') IS NOT NULL
    BEGIN
        DROP PROCEDURE '                 + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@ProcedureName) + N';
    END;'       ;

                IF @GenerateStoredProcedures = 1
                    BEGIN
                        EXEC sys.sp_executesql @stmt = @ExecuteDropString;
                    END;


                /**********************************************************************************************************************
                ** Create stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Create'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO clause 
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoString = @InsertIntoString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                 THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                            ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                        END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoString) > 0
                            BEGIN
                                SET @InsertIntoString = RIGHT(@InsertIntoString, LEN(@InsertIntoString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO VALUES clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoValuesString = @InsertIntoValuesString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                          THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                     ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoValuesString) > 0
                            BEGIN
                                SET @InsertIntoValuesString = RIGHT(@InsertIntoValuesString, LEN(@InsertIntoValuesString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteCreateString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to insert a single record. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteCreateString = @ExecuteCreateString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*INDENT SPACES*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteCreateString = @ExecuteCreateString + N'
AS
    BEGIN
        SET NOCOUNT, XACT_ABORT ON;

        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             '                                     + REPLACE(@TemporaryTableStringColumnType, N'/*INDENT SPACES*/', N'            ') + N'
        );

        /* Perform the create (insert) */
        INSERT INTO '                              + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' (
             '          AS nvarchar(MAX))          + REPLACE(@InsertIntoString, N'/*INDENT SPACES*/', N'            ') + N'
        )
        OUTPUT
             '                                     + REPLACE(@OutputString, N'/*INDENT SPACES*/', N'            ') + N'
        INTO #Output (
             '                                     + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'            ') + N'
        )
        VALUES (
             '                                     + REPLACE(@InsertIntoValuesString, N'/*INDENT SPACES*/', N'            ') + N'
        )

        /* Select the inserted row from the output temporary table to return */
        SELECT
             '                                     + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'            ') + N'
        FROM
            #Output;

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteCreateString;
                            END;

                    END;


                /**********************************************************************************************************************
                ** Read stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Read'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the SELECT clause
                        **********************************************************************************************************************/
                        SELECT
                            @SelectString = @SelectString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CAST(CL.TableAlias AS nvarchar(MAX)) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CASE WHEN CL.TypeName = 'datetimeoffset' THEN N' AT TIME ZONE @AtTimeZoneName' ELSE N'' END + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                                                                THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                           ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                       END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth = 0
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@SelectString) > 0
                            BEGIN
                                SET @SelectString = RIGHT(@SelectString, LEN(@SelectString) - 20);
                            END;

                        /* Find the referenced alias */
                        SELECT
                            @referenced_alias = TL.referenced_alias
                        FROM
                            #TableList AS TL
                        WHERE
                            TL.Depth = 0;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*INDENT SPACES*/AND ' AS nvarchar(MAX)) + CL.TableAlias + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                       THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                  ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                              END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 23);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteReadString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to read a single record. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteReadString = @ExecuteReadString + N' (
     '                                                   + REPLACE(@ParameterString, N'/*INDENT SPACES*/', N'    ');
                                IF @HasDateTimeOffsetFlag = 1
                                    BEGIN
                                        SET @ExecuteReadString = @ExecuteReadString + N'
    ,@AtTimeZoneName nvarchar(MAX) = N''Central Standard Time'' /* SELECT name FROM sys.time_zone_info */';
                                    END;

                                SET @ExecuteReadString = @ExecuteReadString + N'
)'                              ;
                            END;

                        SET @ExecuteReadString = @ExecuteReadString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        SELECT
             '                                   + REPLACE(@SelectString, N'/*INDENT SPACES*/', N'		    ') + N'
        FROM
            '                                    + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName) + CAST(N' AS ' AS nvarchar(MAX)) + @referenced_alias + CASE WHEN LEN(@TableDescription) > 0 THEN N' /* ' + @TableDescription + N' */' ELSE N'' END;

                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @ExecuteReadString = @ExecuteReadString + N'
        WHERE
            '                                            + REPLACE(@WhereString, N'/*INDENT SPACES*/', N'            ');
                            END;

                        SET @ExecuteReadString = @ExecuteReadString + N'

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteReadString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** ReadEager stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'ReadEager'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the SELECT clause
                        **********************************************************************************************************************/
                        SELECT
                            @SelectString = @SelectString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CAST(CL.TableAlias AS nvarchar(MAX)) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CASE WHEN CL.TypeName = 'datetimeoffset' THEN N' AT TIME ZONE @AtTimeZoneName' ELSE N'' END + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                                                                THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                           ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                       END
                        FROM
                            #ColumnList AS CL
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@SelectString) > 0
                            BEGIN
                                SET @SelectString = RIGHT(@SelectString, LEN(@SelectString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + CAST(N'/*INDENT SPACES*/AND ' AS nvarchar(MAX)) + CL.TableAlias + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                      THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                 ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                             END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 1
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 21);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteReadEagerString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to read a single record and joined tables. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteReadEagerString = @ExecuteReadEagerString + N' (
     '                                                        + REPLACE(@ParameterString, N'/*INDENT SPACES*/', N'    ');
                                IF @HasDateTimeOffsetFlag = 1
                                    BEGIN
                                        SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
    ,@AtTimeZoneName nvarchar(MAX) = N''Central Standard Time'' /* SELECT name FROM sys.time_zone_info */';
                                    END;

                                SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
)'                              ;
                            END;

                        SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        SELECT
             '                                        + REPLACE(@SelectString, N'/*INDENT SPACES*/', N'            ') + N'
        FROM
            '                                         + REPLACE(REPLACE(REPLACE(@FromString, '/*[JOIN CONDITION]*/', ''), N'/*[ON SPACE]*/', N'                '), N'/*INDENT SPACES*/', N'            ');

                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'
        WHERE
            '                                                 + @WhereString;
                            END;

                        SET @ExecuteReadEagerString = @ExecuteReadEagerString + N'

    END;'               ;



                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteReadEagerString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Update procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Update'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the UPDATE clause
                        **********************************************************************************************************************/
                        SELECT
                            @UpdateString = @UpdateString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                          THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                     ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@UpdateString) > 0
                            BEGIN
                                SET @UpdateString = RIGHT(@UpdateString, LEN(@UpdateString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*INDENT SPACES*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND (
                            CL.IsPrimaryKeyFlag = 1
                          OR CL.ColumnName      = 'RowVersionStamp'
                        )
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 23);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteUpdateString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to update a single record. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteUpdateString = @ExecuteUpdateString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*INDENT SPACES*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteUpdateString = @ExecuteUpdateString + N'
AS
    BEGIN
        SET NOCOUNT, XACT_ABORT ON;

        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             '                                     + REPLACE(@TemporaryTableStringColumnType, N'/*INDENT SPACES*/', N'            ') + N'
        );

        /* Perform the update */
        UPDATE
            '                                      + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
        SET
             '                                     + REPLACE(@UpdateString, N'/*INDENT SPACES*/', N'            ') + N'
        OUTPUT
             '                                     + REPLACE(@OutputString, N'/*INDENT SPACES*/', N'            ') + N'
        INTO #Output (
             '                                     + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'            ') + N'
        )
        WHERE
            '                                      + REPLACE(@WhereString, N'/*INDENT SPACES*/', N'        ') + N';' + CASE WHEN CHARINDEX('RowVersionStamp', @WhereString, 0) > 0
                                                                                                                                THEN N'

        IF @@ROWCOUNT = 0
            BEGIN
                RAISERROR(N''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1, 1) WITH NOWAIT;
                RETURN 0;
            END;'
                                                                                                                           ELSE N''
                                                                                                                       END + N'

        /* Select the inserted row from the output temporary table to return */
        SELECT
             '                                     + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'            ') + N'
        FROM
            #Output;

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteUpdateString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Upsert (Update/Insert) procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Upsert'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime')
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the UPDATE clause
                        **********************************************************************************************************************/
                        SELECT
                            @UpdateString = @UpdateString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                          THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                     ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@UpdateString) > 0
                            BEGIN
                                SET @UpdateString = RIGHT(@UpdateString, LEN(@UpdateString) - 20);
                            END;

                        /**********************************************************************************************************************
                        ** Check for RowVersionStamp to include or exclude optimistic concurrency
                        **********************************************************************************************************************/
                        IF EXISTS (
                            SELECT
                                *
                            FROM
                                #ColumnList AS CL
                            WHERE
                                CL.ColumnName = 'RowVersionStamp'
                            AND CL.Depth      = 0
                        )
                            BEGIN
                                SET @HasRowVersionStampFlag = 1;
                            END;
                        ELSE
                            BEGIN
                                SET @HasRowVersionStampFlag = 0;
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoString = @InsertIntoString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                 THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                            ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                        END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoString) > 0
                            BEGIN
                                SET @InsertIntoString = RIGHT(@InsertIntoString, LEN(@InsertIntoString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO VALUES clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoValuesString = @InsertIntoValuesString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                          THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                     ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoValuesString) > 0
                            BEGIN
                                SET @InsertIntoValuesString = RIGHT(@InsertIntoValuesString, LEN(@InsertIntoValuesString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*INDENT SPACES*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 0
                        AND CL.IsComputedFlag   = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 23);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteUpsertString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to update a single record. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteUpsertString = @ExecuteUpsertString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*INDENT SPACES*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteUpsertString = @ExecuteUpsertString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;
        
        BEGIN TRANSACTION;
'                       ;
                        IF @HasRowVersionStampFlag = 1
                            BEGIN
                                SET @ExecuteUpsertString = @ExecuteUpsertString + N'
        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             '                                             + REPLACE(@TemporaryTableStringColumnType, N'/*INDENT SPACES*/', N'            ') + N'
        );

        IF @RowVersionStamp IS NULL
            BEGIN
                UPDATE
                    '                                      + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                SET
                     '                                     + REPLACE(@UpdateString, N'/*INDENT SPACES*/', N'                    ') + N'
                OUTPUT
                     '                                     + REPLACE(@OutputString, N'/*INDENT SPACES*/', N'                    ') + N'
                INTO #Output (
                     '                                     + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                    ') + N'
                )
                WHERE
                    '                                      + REPLACE(@WhereString, N'/*INDENT SPACES*/', N'                ') + N';' + CASE WHEN CHARINDEX('RowVersionStamp', @WhereString, 0) > 0
                                                                                                                                                THEN N'

                IF @@ROWCOUNT = 0
                    BEGIN
                        RAISERROR(N''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1, 1) WITH NOWAIT;
                        RETURN 0;
                    END
                ELSE
                    BEGIN
                        /* Select the inserted row from the output temporary table to return */
                        SELECT
                             ' + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                            ') + N'
                        FROM
                            #Output;
                    END;'
                                                                                                                                           ELSE N''
                                                                                                                                       END + N'
            END;
        ELSE
            BEGIN'              ;
                            END;

                        SET @ExecuteUpsertString = @ExecuteUpsertString + REPLACE(N'
                UPDATE
                    ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                SET
                     ' + REPLACE(@UpdateString, N'/*INDENT SPACES*/', N'                    ') + N'
                OUTPUT
                     ' + REPLACE(@OutputString, N'/*INDENT SPACES*/', N'                    ') + N'
                INTO #Output (
                     ' + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                    ') + N'
                )
                WHERE
                    ' + REPLACE(REPLACE(@WhereString, N'' + @NewLineString + '/*INDENT SPACES*/AND [RowVersionStamp] = @RowVersionStamp', N''), N'/*INDENT SPACES*/', N'                ') + N';

                IF @@ROWCOUNT = 0
                    BEGIN
                        INSERT INTO ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' (
                             ' AS nvarchar(MAX)) + REPLACE(@InsertIntoString, N'/*INDENT SPACES*/', N'                            ') + N'
                        )
                        OUTPUT
                             ' + REPLACE(@OutputString
                                        ,N'/*INDENT SPACES*/'
                                        ,CASE WHEN @HasRowVersionStampFlag = 1
                                                  THEN N'                            '
                                             ELSE N'                            '
                                         END
                                 )                                                + N'
                        INTO #Output (
                             ' + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                            ') + N'
                        )
                        VALUES (
                             ' + REPLACE(@InsertIntoValuesString, N'/*INDENT SPACES*/', N'                            ') + N'
                        );

                    END;

                /* Select the inserted row from the output temporary table to return */
                SELECT
                     ' + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                    ') + N'
                FROM
                    #Output;'
                                                                                 ,N'                '
                                                                                 ,CASE WHEN @HasRowVersionStampFlag = 0 THEN N'        ' ELSE N'                ' END
                                                                          );

                        IF @HasRowVersionStampFlag = 1
                            BEGIN
                                SET @ExecuteUpsertString = @ExecuteUpsertString + N'
            END;'               ;

                            END;

                        SET @ExecuteUpsertString = @ExecuteUpsertString + N'
    
        COMMIT TRANSACTION;

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteUpsertString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Indate (Insert/Update) procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Indate'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime')
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the UPDATE clause
                        **********************************************************************************************************************/
                        SELECT
                            @UpdateString = @UpdateString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                          THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                     ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@UpdateString) > 0
                            BEGIN
                                SET @UpdateString = RIGHT(@UpdateString, LEN(@UpdateString) - 20);
                            END;

                        /**********************************************************************************************************************
                        ** Check for RowVersionStamp to include or exclude optimistic concurrency
                        **********************************************************************************************************************/
                        IF EXISTS (
                            SELECT
                                *
                            FROM
                                #ColumnList AS CL
                            WHERE
                                CL.ColumnName = 'RowVersionStamp'
                            AND CL.Depth      = 0
                        )
                            BEGIN
                                SET @HasRowVersionStampFlag = 1;
                            END;
                        ELSE
                            BEGIN
                                SET @HasRowVersionStampFlag = 0;
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoString = @InsertIntoString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                 THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                            ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                        END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoString) > 0
                            BEGIN
                                SET @InsertIntoString = RIGHT(@InsertIntoString, LEN(@InsertIntoString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the INSERT INTO VALUES clause
                        **********************************************************************************************************************/
                        SELECT
                            @InsertIntoValuesString = @InsertIntoValuesString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                          THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                     ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                 END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth          = 0
                        AND CL.IsIdentityFlag = 0
                        AND CL.IsComputedFlag = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime', 'RowVersionStamp')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@InsertIntoValuesString) > 0
                            BEGIN
                                SET @InsertIntoValuesString = RIGHT(@InsertIntoValuesString, LEN(@InsertIntoValuesString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*INDENT SPACES*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND CL.IsPrimaryKeyFlag = 0
                        AND CL.IsComputedFlag   = 0
                        AND CL.TypeName NOT IN ('xml', 'ntext', 'text', 'image', 'sql_variant', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'sysname')
                        AND CL.ColumnName NOT IN ('RowUpdateTime', 'RowCreateTime')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 23);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure                        
                        **********************************************************************************************************************/
                        SET @ExecuteIndateString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to update a single record. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteIndateString = @ExecuteIndateString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*INDENT SPACES*/', N'    ') + N'
)'                              ;
                            END;

                        SET @ExecuteIndateString = @ExecuteIndateString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;
        
        BEGIN TRANSACTION;
'                       ;
                        IF @HasRowVersionStampFlag = 1
                            BEGIN
                                SET @ExecuteIndateString = @ExecuteIndateString + N'
        /* Create temporary table to store the output */
        CREATE TABLE #Output (
             '                                             + REPLACE(@TemporaryTableStringColumnType, N'/*INDENT SPACES*/', N'            ') + N'
        );

        IF @RowVersionStamp IS NULL
            BEGIN
                UPDATE
                    '                                      + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                SET
                     '                                     + REPLACE(@UpdateString, N'/*INDENT SPACES*/', N'                    ') + N'
                OUTPUT
                     '                                     + REPLACE(@OutputString, N'/*INDENT SPACES*/', N'                    ') + N'
                INTO #Output (
                     '                                     + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                    ') + N'
                )
                WHERE
                    '                                      + REPLACE(@WhereString, N'/*INDENT SPACES*/', N'                ') + N';' + CASE WHEN CHARINDEX('RowVersionStamp', @WhereString, 0) > 0
                                                                                                                                                THEN N'

                IF @@ROWCOUNT = 0
                    BEGIN
                        RAISERROR(N''The record you attempted to save was modified by another user after you received the original values! The save operation was canceled, and the current values have been displayed. If you still want to update this record, click the Save button again.'', 1, 1) WITH NOWAIT;
                        RETURN 0;
                    END
                ELSE
                    BEGIN
                        /* Select the inserted row from the output temporary table to return */
                        SELECT
                             ' + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                            ') + N'
                        FROM
                            #Output;
                    END;'
                                                                                                                                           ELSE N''
                                                                                                                                       END + N'
            END;
        ELSE
            BEGIN'              ;
                            END;

                        SET @ExecuteIndateString = @ExecuteIndateString + REPLACE(N'
                INSERT INTO ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' (
                     ' AS nvarchar(MAX)) + REPLACE(@InsertIntoString, N'/*INDENT SPACES*/', N'                    ') + N'
                )
                OUTPUT
                     ' + REPLACE(@OutputString, N'/*INDENT SPACES*/', N'                    ') + N'
                INTO #Output (
                     ' + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                    ') + N'
                )
                SELECT
                     ' + REPLACE(@InsertIntoValuesString, N'/*INDENT SPACES*/', N'                    ') + N'
                WHERE
                    NOT EXISTS (
                    SELECT
                        *
                    FROM
                        ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + N'
                    WHERE
                        ' + REPLACE(REPLACE(@WhereString, N'' + @NewLineString + '/*INDENT SPACES*/AND [RowVersionStamp] = @RowVersionStamp', N''), N'/*INDENT SPACES*/', N'                    ') + N'
                );

                IF @@ROWCOUNT = 0
                    BEGIN
                        UPDATE
                            ' + QUOTENAME(@SchemaName) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(@TableName) + CAST(N' WITH (UPDLOCK, SERIALIZABLE)' AS nvarchar(MAX)) + N'
                        SET
                             ' + REPLACE(@UpdateString, N'/*INDENT SPACES*/', N'                            ') + N'
                        OUTPUT
                             ' + REPLACE(@OutputString, N'/*INDENT SPACES*/', N'                            ') + N'
                        INTO #Output (
                             ' + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                            ') + N'
                        )
                        WHERE
                            ' + REPLACE(REPLACE(@WhereString, N'' + @NewLineString + '/*INDENT SPACES*/AND [RowVersionStamp] = @RowVersionStamp', N''), N'/*INDENT SPACES*/', N'                        ') + N';

                    END;

                /* Select the inserted row from the output temporary table to return */
                SELECT
                     ' + REPLACE(@TemporaryTableStringType, N'/*INDENT SPACES*/', N'                    ') + N'
                FROM
                    #Output;', N'                ', CASE WHEN @HasRowVersionStampFlag = 0 THEN N'        ' ELSE N'                ' END);

                        IF @HasRowVersionStampFlag = 1
                            BEGIN
                                SET @ExecuteIndateString = @ExecuteIndateString + N'
            END;'               ;

                            END;

                        SET @ExecuteIndateString = @ExecuteIndateString + N'
    
        COMMIT TRANSACTION;

    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteIndateString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Delete stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Delete'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N' ' AS nvarchar(MAX)) + CL.TypeName + CL.TypeLength + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                        THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                   ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                               END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND (
                            CL.IsPrimaryKeyFlag = 1
                          OR (
                              CL.ColumnName     = 'RowVersionStamp'
                          AND   CL.Depth        = 0
                          )
                        )
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + @NewLineString + CAST(N'/*INDENT SPACES*/AND ' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CAST(N' = @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                         THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                    ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.Depth            = 0
                        AND (
                            CL.IsPrimaryKeyFlag = 1
                          OR CL.ColumnName      = 'RowVersionStamp'
                        )
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @WhereString = RIGHT(@WhereString, LEN(@WhereString) - 23);
                            END;

                        /* Check for empty WHERE clause */
                        IF LEN(@WhereString) = 0
                            BEGIN
                                SET @WhereString = N'1 = 0 /* Primary key not found */';
                            END;


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @StringToExecuteDelete = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to delete a single record. ' + @TableDescription + N'
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @StringToExecuteDelete = @StringToExecuteDelete + N' (
     '                                                       + REPLACE(@ParameterString, N'/*INDENT SPACES*/', N'    ') + N'
)'                              ;
                            END;

                        SET @StringToExecuteDelete = @StringToExecuteDelete + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        DELETE FROM
            '                                        + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName) + CASE WHEN LEN(@TableDescription) > 0 THEN N' /* ' + @TableDescription + N' */' ELSE N'' END;

                        IF LEN(@WhereString) > 0
                            BEGIN
                                SET @StringToExecuteDelete = @StringToExecuteDelete + N'
        WHERE
            '                                                + REPLACE(@WhereString, N'/*INDENT SPACES*/', N'        ') + N';';
                            END;

                        SET @StringToExecuteDelete = @StringToExecuteDelete + CASE WHEN CHARINDEX('RowVersionStamp', @WhereString, 0) > 0
                                                                                       THEN N'

        IF @@ROWCOUNT = 0
            BEGIN
                RAISERROR(N''The record you attempted to delete was modified by another user after you received the original values! The delete operation was canceled. If you still want to delete this record, click the Delete button again.'', 1, 1) WITH NOWAIT;
                RETURN 0;
            END;'
                                                                                  ELSE N''
                                                                              END;

                        SET @StringToExecuteDelete = @StringToExecuteDelete + N'
    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @StringToExecuteDelete;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Create Search stored procedure
                **********************************************************************************************************************/
                IF @ProcedureType = N'Search'
                    BEGIN
                        /**********************************************************************************************************************
                        ** Find the IDENTITY, PRIMARY KEY or first column for default order by
                        **********************************************************************************************************************/
                        SELECT  TOP (1)
                                @IdentityColumnNameString       = CL.ColumnName
                               ,@IdentityColumnTableAliasString = CL.TableAlias
                        FROM
                                #ColumnList AS CL
                        WHERE
                                CL.Depth      = 0
                        AND CL.IsIdentityFlag = 1
                        ORDER BY
                                CL.ColumnListId ASC;

                        /* Check for missing Identity Column */
                        IF LEN(@IdentityColumnNameString) = 0
                            BEGIN
                                SELECT  TOP (1)
                                        @IdentityColumnNameString       = CL.ColumnName
                                       ,@IdentityColumnTableAliasString = CL.TableAlias
                                FROM
                                        #ColumnList AS CL
                                WHERE
                                        CL.Depth        = 0
                                AND CL.IsPrimaryKeyFlag = 1
                                ORDER BY
                                        CL.ColumnListId ASC;
                            END;

                        /* Check for missing Primary Key and just use the first column */
                        IF LEN(@IdentityColumnNameString) = 0
                            BEGIN
                                SELECT  TOP (1)
                                        @IdentityColumnNameString       = CL.ColumnName
                                       ,@IdentityColumnTableAliasString = CL.TableAlias
                                FROM
                                        #ColumnList AS CL
                                WHERE
                                        CL.Depth = 0
                                ORDER BY
                                        CL.ColumnListId ASC;
                            END;


                        /**********************************************************************************************************************
                        ** Build the parameter list
                        **********************************************************************************************************************/
                        SELECT
                            @ParameterString = @ParameterString + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N'Value nvarchar(MAX) = NULL' AS nvarchar(MAX)) + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                   THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                              ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                          END + @NewLineString + N'/*INDENT SPACES*/,@' + CL.ColumnNameCleaned + CAST(N'Operator nvarchar(30) = N''Equals''' AS varchar(MAX))
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ParameterString = RIGHT(@ParameterString, LEN(@ParameterString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the SELECT clause
                        **********************************************************************************************************************/
                        SELECT
                            @SelectString = @SelectString + @NewLineString + N'/*INDENT SPACES*/,' + QUOTENAME(CL.ColumnName) + N' = ' + CAST(CL.TableAlias AS nvarchar(MAX)) + CAST(N'.' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + CASE WHEN CL.TypeName = 'datetimeoffset' THEN N' AT TIME ZONE @AtTimeZoneName' ELSE N'' END + CASE WHEN LEN(CL.ColumnDescription) > 0
                                                                                                                                                                                                                                                                                                                                                THEN CAST(N' /* ' AS nvarchar(MAX)) + CL.ColumnDescription + CAST(N' */' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                           ELSE CAST(N'' AS nvarchar(MAX))
                                                                                                                                                                                                                                                                                                                                       END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@SelectString) > 0
                            BEGIN
                                SET @SelectString = RIGHT(@SelectString, LEN(@SelectString) - 20);
                            END;


                        /**********************************************************************************************************************
                        ** Build the BETWEEN parameter variables for splitting parameters into begin and end variables for BETWEEN operations
                        **********************************************************************************************************************/
                        SELECT
                            @BetweenVariableString = @BetweenVariableString + @NewLineString + N'/*INDENT SPACES*/DECLARE @' + CL.ColumnNameCleaned + CAST(N'Begin ' AS nvarchar(MAX)) + /**/
                            CASE WHEN CL.TypeName = 'uniqueidentifier'
                                     THEN 'nvarchar(MAX);'
                                ELSE CASE WHEN CL.TypeName IN ('time', 'date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                              THEN 'nvarchar(MAX);'
                                         ELSE CL.TypeName + CL.TypeLength + N';'
                                     END
                            END                      + @NewLineString + N'/*INDENT SPACES*/DECLARE @' + CL.ColumnNameCleaned + CAST(N'End ' AS nvarchar(MAX)) + /**/
                            CASE WHEN CL.TypeName = 'uniqueidentifier'
                                     THEN 'nvarchar(MAX);'
                                ELSE CASE WHEN CL.TypeName IN ('time', 'date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                              THEN 'nvarchar(MAX);'
                                         ELSE CL.TypeName + CL.TypeLength + N';'
                                     END
                            END                      + CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                THEN @NewLineString + N'/*INDENT SPACES*/DECLARE @' + CL.ColumnNameCleaned + N'EndDataType nvarchar(MAX);'
                                                           ELSE N''
                                                       END + CASE WHEN CL.TypeName IN ('time')
                                                                      THEN @NewLineString + N'/*INDENT SPACES*/DECLARE @' + CL.ColumnNameCleaned + N'EndPrecision nvarchar(MAX);'
                                                                 ELSE N''
                                                             END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@BetweenVariableString) > 0
                            BEGIN
                                SET @BetweenVariableString = RIGHT(@BetweenVariableString, LEN(@BetweenVariableString) - 19);
                            END;


                        /**********************************************************************************************************************
                        ** Build the temporary tables for passing in lists
                        **********************************************************************************************************************/
                        SELECT
                            @TempTableListString = @TempTableListString + @NewLineString + N'/*INDENT SPACES*/CREATE TABLE #' + CL.ColumnNameCleaned + CAST(N'Value (' AS nvarchar(MAX)) + QUOTENAME(CL.ColumnName) + N' ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END + N' NULL);'
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@TempTableListString) > 0
                            BEGIN
                                SET @TempTableListString = RIGHT(@TempTableListString, LEN(@TempTableListString) - 19);
                            END;


                        /**********************************************************************************************************************
                        ** Build the temporary tables for passing in lists
                        **********************************************************************************************************************/
                        SELECT
                            @OrderColumnString = @OrderColumnString + N', N''' + CL.ColumnName + N''''
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                        ORDER BY
                            CL.ColumnListId ASC;

                        /* Fix the first item */
                        IF LEN(@OrderColumnString) > 0
                            BEGIN
                                SET @OrderColumnString = RIGHT(@OrderColumnString, LEN(@OrderColumnString) - 2);
                            END;


                        /**********************************************************************************************************************
                        ** Build the WHERE clause
                        ** Unsupported Column Types: 'image', 'text', 'sql_variant', 'ntext', 'hierarchyid', 'geometry', 'geography', 'varbinary', 'binary', 'xml', 'sysname'
                        **********************************************************************************************************************/
                        SELECT
                            @WhereString = @WhereString + N'
        IF @'                              + CL.ColumnNameCleaned + CAST(N'Value IS NOT NULL OR @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CAST(N'Operator IN (''Blanks'', ''NonBlanks'')
            BEGIN
                /* Figure out if the value contains the string [ to ] */
                SET @SeparatorStartingPosition = CHARINDEX('' to '', @' AS nvarchar(MAX)) + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N');

                IF @'                      + CL.ColumnNameCleaned + N'Operator IN (''Exists'', ''NotExists'')
                    BEGIN
                        /* Extract JSON array into temporary table for use with Exists and NotExists where operators */
                        INSERT INTO #'     + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N' (' + QUOTENAME(CL.ColumnName) + N')
                        SELECT CAST(Value AS ' + CL.TypeName + CL.TypeLength + N') FROM OPENJSON(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N');
                    END
                ELSE
                    BEGIN
                        /* Split the value into begin and end variables for other where operators */
                        IF @SeparatorStartingPosition = 0
                            BEGIN
                                SET @'     + CL.ColumnNameCleaned + CAST('Begin' AS nvarchar(MAX)) + N' = @' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N';
                                SET @'     + CL.ColumnNameCleaned + CAST('End' AS nvarchar(MAX)) + N' = @' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N';
                            END;
                        ELSE
                            BEGIN
                                SET @'     + CL.ColumnNameCleaned + CAST('Begin' AS nvarchar(MAX)) + N' = SUBSTRING(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N', 1, @SeparatorStartingPosition - 1);
                                SET @'     + CL.ColumnNameCleaned + CAST('End' AS nvarchar(MAX)) + N' = SUBSTRING(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N', @SeparatorStartingPosition + 4, LEN(@' + CL.ColumnNameCleaned + CAST('Value' AS nvarchar(MAX)) + N'));
                            END;
                    END;
'                                          +

                            /* Build the date statements */
                            CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                     THEN N'
                /* Determine the date data types */
                IF CHARINDEX('':'', @' + CL.ColumnNameCleaned + N'End) > 0
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndDataType = ''datetime'';
                    END;
                ELSE
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndDataType = ''date'';
                    END;

                /* Check for begin month/year */
                IF LEN(@' + CL.ColumnNameCleaned + N'Begin) IN (6, 7)
                    BEGIN
                        IF CHARINDEX(''/'', @' + CL.ColumnNameCleaned + N'Begin) > 0
                            BEGIN
                                SET @SeparatorStartingPosition = CHARINDEX(''/'', @' + CL.ColumnNameCleaned + N'Begin);
                            END;
                        IF @SeparatorStartingPosition = 0
                            BEGIN
                                SET @SeparatorStartingPosition = CHARINDEX(''-'', @' + CL.ColumnNameCleaned + N'Begin);
                            END;

                        IF @SeparatorStartingPosition > 0
                            BEGIN
                                IF LEN(SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)) = 4
                                    BEGIN
                                        SET @' + CL.ColumnNameCleaned + N'Begin = ''SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)-SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, @SeparatorStartingPosition + 1, LEN(@' + CL.ColumnNameCleaned + N'Begin))-1'';
                                    END;
                                ELSE
                                    BEGIN
                                        SET @' + CL.ColumnNameCleaned + N'Begin = ''SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, @SeparatorStartingPosition + 1, LEN(@' + CL.ColumnNameCleaned + N'Begin))-SUBSTRING(@' + CL.ColumnNameCleaned + N'Begin, 1, @SeparatorStartingPosition - 1)-1'';
                                    END;
                            END;
                    END;

                    '
                                ELSE
                                    /* Build the time statements */
                                    CASE WHEN CL.TypeName IN ('time')
                                             THEN N'
                /* Determine the time precision (hour, minute or second)  */
                IF LEN(@' + CL.ColumnNameCleaned + N'End) - LEN(REPLACE(@' + CL.ColumnNameCleaned + N'End, '':'', '''')) = 0
                    BEGIN
                        SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Hour'';
                    END;
                ELSE IF LEN(@' + CL.ColumnNameCleaned + N'End) - LEN(REPLACE(@' + CL.ColumnNameCleaned + N'End, '':'', '''')) = 1
                        BEGIN
                            SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Minute'';
                        END;
                ELSE
                        BEGIN
                            SET @' + CL.ColumnNameCleaned + N'EndPrecision = N''Second'';
                        END;

'
                                        ELSE N''
                                    END
                            END            +


                            /* Build the WHERE clause  */
                            N'
                SET @StringToExecute = @StringToExecute + ' + CASE WHEN CL.TypeName IN ('tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float')
                                                                       THEN N'

                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''EqualsWithBlanks''               THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''DoesNotEqual''                   THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''DoesNotEqualWithBlanks''         THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThan''                    THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''GreaterThanWithBlanks''          THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThanOrEqualTo''           THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''GreaterThanOrEqualToWithBlanks'' THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThan''                       THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''LessThanWithBlanks''             THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThanOrEqualTo''              THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''LessThanOrEqualToWithBlanks''    THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Between''                        THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End''
                    WHEN ''BetweenWithBlanks''              THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' BETWEEN     @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''NotBetween''                     THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' NOT BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End''
                    WHEN ''NotBetweenWithBlanks''           THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' NOT BETWEEN @' + CL.ColumnNameCleaned + N'Begin AND @' + CL.ColumnNameCleaned + N'End OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Blanks''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
                    WHEN ''NonBlanks''                      THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
                    WHEN ''Exists''                         THEN N''
            AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    WHEN ''NotExists''                      THEN N''
            AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                                          ELSE N''
            AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                  ELSE CASE WHEN CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'timestamp')
                                                                                THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                   THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
                    WHEN ''EqualsWithBlanks''         THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''DoesNotEqual''             THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <> '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
                    WHEN ''DoesNotEqualWithBlanks''   THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <> '''''''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''BeginsWith''               THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
                    WHEN ''BeginsWithWithBlanks''     THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE '''''''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''EndsWith''                 THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''''''''
                    WHEN ''EndsWithWithBlanks''       THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + '''''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''Contains''                 THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
                    WHEN ''ContainsWithBlanks''       THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''DoesNotContain''           THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' NOT LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%''''''
                    WHEN ''DoesNotContainWithBlanks'' THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' NOT LIKE ''''%'''' + @' + CL.ColumnNameCleaned + N'Begin + ''''%'''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''Blanks''                   THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = '''''''')''
                    WHEN ''NonBlanks''                THEN N''
            AND (NULLIF(LEN(' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N'), 0)) IS NOT NULL''
                    WHEN ''Exists''                   THEN N''
            AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    WHEN ''NotExists''                THEN N''
            AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                                    ELSE N''
            AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                           ELSE CASE WHEN CL.TypeName IN ('date', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                         THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator

                    WHEN ''Equals''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                       END + N'''
                    WHEN ''EqualsWithBlanks''               THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                       END + N' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''DoesNotEqual''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <> ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                        END + N'''
                    WHEN ''DoesNotEqualWithBlanks''               THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <> ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                        END + N' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThan''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' > ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                       END + N'''
                    WHEN ''GreaterThanWithBlanks''               THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' > ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                       END + N' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThanOrEqualTo''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                        END + N'''
                    WHEN ''GreaterThanOrEqualToWithBlanks''               THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                        END + N' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThan''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                       END + N'''
                    WHEN ''LessThanWithBlanks''               THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                       END + N' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThanOrEqualTo''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                        END + N'''
                    WHEN ''LessThanOrEqualToWithBlanks''               THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''''
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin'
                                                                                        END + N' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Between'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + ''''''))'
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End))'
                                                                                        END + N'''
                            ELSE N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''')'
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'End)'
                                                                                        END + N'''
                                          END

                    WHEN ''BetweenWithBlanks'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''') OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End) OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                        END + N'''
                            ELSE N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                 THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                            ELSE N'@' + CL.ColumnNameCleaned + N'Begin AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'End OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                        END + N'''
                                          END
                    WHEN ''NotBetween'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + ''''''))'
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End))'
                                                                                       END + N'''
                            ELSE N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''')'
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'End)'
                                                                                       END + N'''
                                          END

                    WHEN ''NotBetweenWithBlanks'' THEN CASE WHEN @' + CL.ColumnNameCleaned + N'EndDataType = ''date'' THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, CAST(@' + CL.ColumnNameCleaned + N'End AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''') OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD(DAY, 1, @' + CL.ColumnNameCleaned + N'End) OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                       END + N'''
                            ELSE N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < ' + CASE WHEN CL.TypeName IN ('datetime2', 'datetimeoffset', 'smalldatetime', 'datetime')
                                                                                                THEN N'CAST(@' + CL.ColumnNameCleaned + N'Begin AS datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= CAST(@' + CL.ColumnNameCleaned + N'End as datetime2(7)) AT TIME ZONE '''''' + @AtTimeZoneName + '''''' OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                           ELSE N'@' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'End OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)'
                                                                                       END + N'''
                                          END
                    WHEN ''Blanks''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
                    WHEN ''NonBlanks''                      THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
                    WHEN ''Exists''                         THEN N''
            AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    WHEN ''NotExists''                      THEN N''
            AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    ELSE N''
            AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                                    ELSE CASE WHEN CL.TypeName IN ('time')
                                                                                                  THEN N'
                CASE @' +   CL.ColumnNameCleaned + N'Operator
                    WHEN ''Equals''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''EqualsWithBlanks''               THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' = @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''DoesNotEqual''                   THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''DoesNotEqualWithBlanks''         THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <> @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThan''                    THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''GreaterThanWithBlanks''          THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' > @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''GreaterThanOrEqualTo''           THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''GreaterThanOrEqualToWithBlanks'' THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThan''                       THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''LessThanWithBlanks''             THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''LessThanOrEqualTo''              THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin''
                    WHEN ''LessThanOrEqualToWithBlanks''    THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' <= @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Between''                        THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End))''
                    WHEN ''BetweenWithBlanks''                        THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= @' + CL.ColumnNameCleaned + N'Begin AND ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End) OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''NotBetween''                        THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End))''
                    WHEN ''NotBetweenWithBlanks''                        THEN N''
            AND (' +        CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' < @' + CL.ColumnNameCleaned + N'Begin OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' >= DATEADD('' + @' + CL.ColumnNameCleaned + N'EndPrecision + '', 1, @' + CL.ColumnNameCleaned + N'End) OR ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL)''
                    WHEN ''Blanks''                         THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NULL''
                    WHEN ''NonBlanks''                      THEN N''
            AND ' +         CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N' IS NOT NULL''
                    WHEN ''Exists''                         THEN N''
            AND EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N')''
                    WHEN ''NotExists''                      THEN N''
            AND NOT EXISTS (SELECT * FROM #' + CL.ColumnNameCleaned + N'Value WHERE ' + QUOTENAME(CL.ColumnName) + N' = ' + CL.TableAlias + N'.' + QUOTENAME(CL.ColumnName) + N')''
                                                          ELSE N''
            AND 1 = 2 /* Operator is not supported */''
                END
'
                                                                                             ELSE N' 
            AND 1=2 /* Data type is not supported */'
                                                                                         END
                                                                                END
                                                                       END
                                                              END + N'
            END
        '
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');



                        /**********************************************************************************************************************
                        ** Build the parameter definition and parameters for sys.sp_executesql
                        **********************************************************************************************************************/
                        SELECT
                            @SP_ExecuteSQLParameterDefinitionString = @SP_ExecuteSQLParameterDefinitionString + N'
                    ,@'                                               + CL.ColumnNameCleaned + N'Begin ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END + N'
                    ,@'                                               + CL.ColumnNameCleaned + N'End ' + CASE WHEN CL.TypeName = 'uniqueidentifier' THEN 'nvarchar(MAX)' ELSE CL.TypeName + CL.TypeLength END
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');


                        SELECT
                            @SP_ExecuteSQLParametersString = @SP_ExecuteSQLParametersString + N'
                    ,@'                                      + CL.ColumnNameCleaned + N'Begin = @' + CL.ColumnNameCleaned + N'Begin
                    ,@'                                      + CL.ColumnNameCleaned + N'End = @' + CL.ColumnNameCleaned + N'End'
                        FROM
                            #ColumnList AS CL
                        WHERE
                            CL.IsReferencedColumn = 0
                        AND CL.TypeName IN ('varchar', 'nvarchar', 'char', 'nchar', 'uniqueidentifier', 'date', 'time', 'datetime2', 'datetimeoffset', 'smalldatetime', 'datetime', 'tinyint', 'smallint', 'int', 'bigint', 'bit', 'decimal', 'numeric', 'smallmoney', 'money', 'real', 'float');


                        /**********************************************************************************************************************
                        ** Build the stored procedure
                        **********************************************************************************************************************/
                        SET @ExecuteSearchString = N'
' +                     @AutoGeneratedCommentString + N'
/**********************************************************************************************************************
** Author:      ' +     @UserNameString + N'
** More Info:   http://kevinmartin.tech/sp_CRUDGen
** Create Time: ' +     @CreateTimeString + N'
** Description: Used to execute performant optional parameter search (kitchen sink search). Assess enabling ''Optimize 
**              for AdHoc Workloads'' if the adhoc plan cache is 20-30% of the total plan cache.
**              ' +     @TableDescription + N'
**
** Parameters:  @[COLUMN-NAME]Value: There are three ways to pass values for each table column. There are samples below
**                                   with their supported operators
**
**                Single Value = "Value 1" 
**                  Allowed Operators: (Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, 
**                                      GreaterThanWithBlanks, GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, 
**                                      LessThan, LessThanWithBlanks, LessThanOrEqualTo, LessThanOrEqualToWithBlanks, 
**                                      BeginsWith, BeginsWithWithBlanks, EndsWith, EndsWithWithBlanks, Contains, 
**                                      ContainsWithBlanks, DoesNotContain, DoesNotContainWithBlanks)
**
**                Ranged Value = "Value 1 to Value 2"
**                 Allowed Operators: (Between, BetweenWithBlanks, NotBetween, NotBetweenWithBlanks, BetweenWithBlanks)
**
**                Multivalued JSON = "["Value 1","Value 2","Value 3"]"
**                 Allowed Operators: (Exists, NotExists Operators)
**
**              @[COLUMN-NAME]Operator: Different column data types have different operators that apply.
**
**                 Numeric Columns (tinyint, smallint, int, bigint, bit, decimal, numeric, smallmoney, money, real, float)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, GreaterThanWithBlanks, 
**                   GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, LessThan, LessThanWithBlanks, 
**                   LessThanOrEqualTo, LessThanOrEqualToWithBlanks, Between, BetweenWithBlanks, NotBetween, 
**                   NotBetweenWithBlanks, Blanks, NonBlanks, Exists, NotExists
**
**                 String Columns (varchar, nvarchar, char, nchar, uniqueidentifier, timestamp)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, BeginsWith, BeginsWithWithBlanks, 
**                   EndsWith, EndsWithWithBlanks, Contains, ContainsWithBlanks, DoesNotContain, 
**                   DoesNotContainWithBlanks, Blanks, NonBlanks, Exists, NotExists
**
**                 DateTime Columns (date, time, datetime2, datetimeoffset, smalldatetime, datetime)
**                   Equals, EqualsWithBlanks, DoesNotEqual, DoesNotEqualWithBlanks, GreaterThan, GreaterThanWithBlanks, 
**                   GreaterThanOrEqualTo, GreaterThanOrEqualToWithBlanks, LessThan, LessThanWithBlanks, LessThanOrEqualTo, 
**                   LessThanOrEqualToWithBlanks, Between, BetweenWithBlanks, NotBetween, NotBetweenWithBlanks, Blanks, 
**                   NonBlanks, Exists, NotExists
**
**              @PageNumber: This is for pagination of the query results. Pass 1 to return the 1st page of results, set 
**                           the value to 2 for the 2nd page
**
**              @PageSize: This is for pagination of the query results. Pass 100 to return 100 records for each 
**                         @PageNumber. You can set this to a high number (2147483647) and keep @PageNumber = 1 to return 
**                         "all" query records.
**
**              @OrderColumn: This is for the sort order of the query results. Pass the column name for the query results
**                            to be sorted by. Ensure you also pass in the table @OrderColumnAlias parameter.
**
**              @OrderColumnAlias: This is for the sort order of the query results. Pass the table alias for the @OrderColumn.
**
**              @OrderDirection: This is for the sort order of the query results. Pass "ASC" for ascending and "DESC" for 
**                               descending order.
**
**              @AtTimeZoneName: This is the value of the timezone datetimeoffset table columns should be converted to
**                               Use "SELECT name FROM sys.time_zone_info" for a list of supported time zone names.
**
**              @Debug: If you set this to 0 it will display an XML link in the results you can click on to view the 
**                       query text. If you set this to 1 it will execute the query.
**********************************************************************************************************************/
' +                     @MITLicenseCommentString + N'
CREATE PROCEDURE ' +    QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@ProcedureName);

                        IF LEN(@ParameterString) > 0
                            BEGIN
                                SET @ExecuteSearchString = @ExecuteSearchString + N' (
     '                                                     + REPLACE(@ParameterString, N'/*INDENT SPACES*/', N'    ') + N'
    ,@AtTimeZoneName nvarchar(MAX) = N''Central Standard Time'' /* SELECT name FROM sys.time_zone_info */
    ,@PageNumber int = 1
    ,@PageSize int = 100
    ,@OrderColumnAlias nvarchar(MAX) = N'''                + @IdentityColumnTableAliasString + N'''
    ,@OrderColumn nvarchar(MAX) = N'''                     + @IdentityColumnNameString + N'''
    ,@OrderDirection char(3) = ''ASC''    
    ,@Debug bit = 0
)'                              ;
                            END;

                        SET @ExecuteSearchString = @ExecuteSearchString + N'
AS
    BEGIN

        SET NOCOUNT, XACT_ABORT ON;

        /* Stored Procedure Variables */
        DECLARE @StringToExecute nvarchar(MAX);
        DECLARE @SeparatorStartingPosition bigint;
        DECLARE @ParameterDefinition nvarchar(MAX);

        SET @StringToExecute = N'''';
        SET @SeparatorStartingPosition = 0;

        /* Parameter Variables - This is for splitting parameters into begin and end variables for BETWEEN operations */
        '                                          + REPLACE(@BetweenVariableString, N'/*INDENT SPACES*/', N'        ') + N'

        /* Create Temp Tables - This is for inserting JSON into for passing a list of parameter values */
        '                                          + REPLACE(@TempTableListString, N'/*INDENT SPACES*/', N'        ') + N'

        /* Check if OrderColumn parameter is valid for ORDER BY */
        IF @OrderColumn NOT IN (
            '                                      + @OrderColumnString + N'
        )
           BEGIN
               RAISERROR(N''OrderColumn parameter is not a valid table column!'', 1, 0) WITH NOWAIT;
               RETURN 1;
           END;

        SET @StringToExecute = N''
/* Executed by stored procedure named '            + QUOTENAME(@SchemaName) + N'.' + QUOTENAME(@TableName + @ProcedureType) + N' */'' + N''

WITH Keys
    AS (
        SELECT
            '                                      + QUOTENAME(@IdentityColumnNameString) + N' = ' + @IdentityColumnTableAliasString + N'.' + QUOTENAME(@IdentityColumnNameString) + N'
            ,RowNumber = ROW_NUMBER() OVER (ORDER BY '' + @OrderColumnAlias + N''.'' + QUOTENAME(@OrderColumn) + CASE WHEN @OrderDirection = N''ASC'' THEN N'' ASC'' ELSE N'' DESC'' END + N'')
        FROM
            '                                      + REPLACE(REPLACE(REPLACE(@FromString, N'/*[ON SPACE]*/', N'                '), N'/*INDENT SPACES*/', N'            '), N'/*[JOIN CONDITION]*/', N'') + N'
        WHERE
            1 = 1'''                               + @WhereString + N'

SET @StringToExecute = @StringToExecute + N''
),Counts
    AS (
        SELECT RowsTotal = COUNT_BIG(*) FROM Keys AS K
    )
SELECT
     '                                             + REPLACE(@SelectString, N'/*INDENT SPACES*/', N'    ') + N'
    ,RowsTotal = Counts.RowsTotal
FROM
    Keys
    INNER JOIN '                                   + REPLACE(REPLACE(REPLACE(@FromString, N'/*[ON SPACE]*/', N'            '), N'/*INDENT SPACES*/', N'        '), N'/*[JOIN CONDITION]*/', N'
        ON Keys.' + QUOTENAME(@IdentityColumnNameString) + N' = ' + @IdentityColumnTableAliasString + N'.' + QUOTENAME(@IdentityColumnNameString) + N'') + N'
    CROSS JOIN Counts
WHERE
    Keys.RowNumber > (( @PageNumber -1 ) * @PageSize )
AND Keys.RowNumber < (( @PageNumber * @PageSize ) + 1)
ORDER BY
    Keys.RowNumber;''

        IF @Debug = 1
            BEGIN
                SELECT 
                    CAST(N''/* Click here to view the generated stored procedures.
Copy just the T-SQL below this block comment into a new query window to execute. */

'' AS nvarchar(MAX)) + @StringToExecute + N''


/* Copy just the T-SQL above this block comment into a new query window to execute. */
'' AS [processing-instruction(output)] FOR XML PATH('''')
            END;
        ELSE
            BEGIN
                SET @ParameterDefinition = N''@PageNumber int
                    ,@PageSize int
                    ,@AtTimeZoneName nvarchar(max)' + @SP_ExecuteSQLParameterDefinitionString + N''';

                EXEC sys.sp_executesql
                     @stmt = @StringToExecute
                    ,@params = @ParameterDefinition
                    ,@PageNumber = @PageNumber
                    ,@PageSize = @PageSize
                    ,@AtTimeZoneName = @AtTimeZoneName' + @SP_ExecuteSQLParametersString + N';
            END
    END;'               ;


                        /**********************************************************************************************************************
                        ** Create the store procedure
                        **********************************************************************************************************************/
                        IF @GenerateStoredProcedures = 1
                            BEGIN
                                EXEC sys.sp_executesql @stmt = @ExecuteSearchString;
                            END;
                    END;


                /**********************************************************************************************************************
                ** Prepare all the execute strings for debug output
                **********************************************************************************************************************/
                -- SQL Prompt formatting off
                SET @ExecuteOutputString = @ExecuteOutputString + @NewLineString + 
                    CASE WHEN LEN(@ExecuteDropString) > 0 THEN @ExecuteDropString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteCreateString) > 0 THEN @ExecuteCreateString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteReadString) > 0 THEN @ExecuteReadString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteReadEagerString) > 0 THEN @ExecuteReadEagerString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteUpdateString) > 0 THEN @ExecuteUpdateString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteUpsertString) > 0 THEN @ExecuteUpsertString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteIndateString) > 0 THEN @ExecuteIndateString + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@StringToExecuteDelete) > 0 THEN @StringToExecuteDelete + @NewLineString + 'GO' + @NewLineString ELSE N'' END + 
                    CASE WHEN LEN(@ExecuteSearchString) > 0 THEN @ExecuteSearchString + @NewLineString + 'GO' + @NewLineString ELSE N'' END;
                -- SQL Prompt formatting on


                /**********************************************************************************************************************
                ** Mark this stored procedure record as processed
                **********************************************************************************************************************/
                UPDATE
                    #StoreProcedureList
                SET
                    IsProcessedFlag = 1
                WHERE
                    StoreProcedureId = @StoreProcedureId
                OPTION (RECOMPILE);

            END;


        /**********************************************************************************************************************
        ** Output the store procedure execute strings
        **********************************************************************************************************************/
        --IF @GenerateStoredProcedures = 0
        IF @GenerateStoredProcedures <> -1
            BEGIN
                SELECT
                    [processing-instruction(output)] = CAST(N'/* Click here to view the generated stored procedures.
If you execute dbo.sp_CRUDGen with @GenerateStoredProcedures = 1 it will create the stored procedures automatically.
Copy just the T-SQL below this block comment into a new query window to execute. */

'                   AS nvarchar(MAX))                  + @ExecuteOutputString + N'


/* Copy just the T-SQL above this block comment into a new query window to execute. */
'
                FOR XML PATH('');
            END;


    END;
GO